# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:29:12+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class Sort(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Error(BaseModel):
    code: str = Field(
        ..., description='Fixed machine readable code', examples=['action_failed']
    )
    message: str = Field(
        ..., description='Humanized error message', examples=['Action failed']
    )


class Resource(BaseModel):
    id: int = Field(..., description='ID of the Resource', examples=[42])
    type: str = Field(
        ..., description='Type of resource referenced', examples=['server']
    )


class Status1(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status1 = Field(..., description='Status of the Action')


class Pagination(BaseModel):
    last_page: float = Field(
        ...,
        description='ID of the last page available. Can be null if the current page is the last one.',
        examples=[4],
    )
    next_page: float = Field(
        ...,
        description='ID of the next page. Can be null if the current page is the last one.',
        examples=[4],
    )
    page: float = Field(..., description='Current page number', examples=[3])
    per_page: float = Field(
        ...,
        description='Maximum number of items shown per page in the response',
        examples=[25],
    )
    previous_page: float = Field(
        ...,
        description='ID of the previous page. Can be null if the current page is the first one.',
        examples=[2],
    )
    total_entries: float = Field(
        ...,
        description='The total number of entries that exist in the database for this query. Nullable if unknown.',
        examples=[100],
    )


class Meta(BaseModel):
    pagination: Pagination


class ActionsGetResponse(BaseModel):
    actions: List[Action]
    meta: Optional[Meta] = None


class Status2(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status3(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action1(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status3 = Field(..., description='Status of the Action')


class ActionsIdGetResponse(BaseModel):
    action: Action1 = Field(..., title='Action')


class Sort2(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Type(Enum):
    uploaded = 'uploaded'
    managed = 'managed'


class Error2(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None


class Issuance(Enum):
    pending = 'pending'
    completed = 'completed'
    failed = 'failed'


class Renewal(Enum):
    scheduled = 'scheduled'
    pending = 'pending'
    failed = 'failed'
    unavailable = 'unavailable'


class Status4(BaseModel):
    error: Optional[Error2] = Field(
        None,
        description='If issuance or renewal reports `failed`, this property contains information about what happened',
        examples=[None],
    )
    issuance: Optional[Issuance] = Field(
        None,
        description='Status of the issuance process of the Certificate',
        examples=['valid'],
    )
    renewal: Optional[Renewal] = Field(
        None,
        description='Status of the renewal process of the Certificate.',
        examples=['scheduled'],
    )


class UsedByItem(BaseModel):
    id: int = Field(..., description='ID of resource referenced', examples=[4711])
    type: str = Field(
        ..., description='Type of resource referenced', examples=['load_balancer']
    )


class Certificate(BaseModel):
    certificate: str = Field(
        ...,
        description='Certificate and chain in PEM format, in order so that each record directly certifies the one preceding',
        examples=['-----BEGIN CERTIFICATE-----\n...'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    domain_names: List[str] = Field(
        ...,
        description='Domains and subdomains covered by the Certificate',
        examples=[['example.com', 'webmail.example.com', 'www.example.com']],
    )
    fingerprint: str = Field(
        ...,
        description='SHA256 fingerprint of the Certificate',
        examples=['03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    not_valid_after: str = Field(
        ...,
        description='Point in time when the Certificate stops being valid (in ISO-8601 format)',
        examples=['2019-07-08T09:59:59+00:00'],
    )
    not_valid_before: str = Field(
        ...,
        description='Point in time when the Certificate becomes valid (in ISO-8601 format)',
        examples=['2019-01-08T10:00:00+00:00'],
    )
    status: Optional[Status4] = Field(
        None,
        description='Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates',
    )
    type: Optional[Type] = Field(
        None, description='Type of the Certificate', examples=['uploaded']
    )
    used_by: List[UsedByItem] = Field(
        ..., description='Resources currently using the Certificate'
    )


class Meta1(BaseModel):
    pagination: Pagination


class CertificatesGetResponse(BaseModel):
    certificates: List[Certificate]
    meta: Optional[Meta1] = None


class CertificatesPostRequest(BaseModel):
    certificate: Optional[str] = Field(
        None,
        description='Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.',
        examples=['-----BEGIN CERTIFICATE-----\n...'],
    )
    domain_names: Optional[List[str]] = Field(
        None,
        description="Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.",
        examples=[None],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ..., description='Name of the Certificate', examples=['my website cert']
    )
    private_key: Optional[str] = Field(
        None,
        description='Certificate key in PEM format. Required for type `uploaded` Certificates.',
        examples=['-----BEGIN PRIVATE KEY-----\n...'],
    )
    type: Optional[Type] = Field(
        None,
        description="Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.",
        examples=['uploaded'],
    )


class Error3(BaseModel):
    code: str = Field(
        ..., description='Fixed machine readable code', examples=['action_failed']
    )
    message: str = Field(
        ..., description='Humanized error message', examples=['Action failed']
    )


class Status5(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action2(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error3 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status5 = Field(..., description='Status of the Action')


class Error4(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None


class Status6(BaseModel):
    error: Optional[Error4] = Field(
        None,
        description='If issuance or renewal reports `failed`, this property contains information about what happened',
        examples=[None],
    )
    issuance: Optional[Issuance] = Field(
        None,
        description='Status of the issuance process of the Certificate',
        examples=['valid'],
    )
    renewal: Optional[Renewal] = Field(
        None,
        description='Status of the renewal process of the Certificate.',
        examples=['scheduled'],
    )


class Certificate1(BaseModel):
    certificate: str = Field(
        ...,
        description='Certificate and chain in PEM format, in order so that each record directly certifies the one preceding',
        examples=['-----BEGIN CERTIFICATE-----\n...'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    domain_names: List[str] = Field(
        ...,
        description='Domains and subdomains covered by the Certificate',
        examples=[['example.com', 'webmail.example.com', 'www.example.com']],
    )
    fingerprint: str = Field(
        ...,
        description='SHA256 fingerprint of the Certificate',
        examples=['03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    not_valid_after: str = Field(
        ...,
        description='Point in time when the Certificate stops being valid (in ISO-8601 format)',
        examples=['2019-07-08T09:59:59+00:00'],
    )
    not_valid_before: str = Field(
        ...,
        description='Point in time when the Certificate becomes valid (in ISO-8601 format)',
        examples=['2019-01-08T10:00:00+00:00'],
    )
    status: Optional[Status6] = Field(
        None,
        description='Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates',
    )
    type: Optional[Type] = Field(
        None, description='Type of the Certificate', examples=['uploaded']
    )
    used_by: List[UsedByItem] = Field(
        ..., description='Resources currently using the Certificate'
    )


class CertificatesPostResponse(BaseModel):
    action: Optional[Action2] = Field(None, title='NullableAction')
    certificate: Certificate1 = Field(..., title='Certificate')


class Status7(BaseModel):
    error: Optional[Error4] = Field(
        None,
        description='If issuance or renewal reports `failed`, this property contains information about what happened',
        examples=[None],
    )
    issuance: Optional[Issuance] = Field(
        None,
        description='Status of the issuance process of the Certificate',
        examples=['valid'],
    )
    renewal: Optional[Renewal] = Field(
        None,
        description='Status of the renewal process of the Certificate.',
        examples=['scheduled'],
    )


class Certificate2(BaseModel):
    certificate: str = Field(
        ...,
        description='Certificate and chain in PEM format, in order so that each record directly certifies the one preceding',
        examples=['-----BEGIN CERTIFICATE-----\n...'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    domain_names: List[str] = Field(
        ...,
        description='Domains and subdomains covered by the Certificate',
        examples=[['example.com', 'webmail.example.com', 'www.example.com']],
    )
    fingerprint: str = Field(
        ...,
        description='SHA256 fingerprint of the Certificate',
        examples=['03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    not_valid_after: str = Field(
        ...,
        description='Point in time when the Certificate stops being valid (in ISO-8601 format)',
        examples=['2019-07-08T09:59:59+00:00'],
    )
    not_valid_before: str = Field(
        ...,
        description='Point in time when the Certificate becomes valid (in ISO-8601 format)',
        examples=['2019-01-08T10:00:00+00:00'],
    )
    status: Optional[Status7] = Field(
        None,
        description='Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates',
    )
    type: Optional[Type] = Field(
        None, description='Type of the Certificate', examples=['uploaded']
    )
    used_by: List[UsedByItem] = Field(
        ..., description='Resources currently using the Certificate'
    )


class CertificatesIdGetResponse(BaseModel):
    certificate: Certificate2 = Field(..., title='Certificate')


class CertificatesIdPutRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New Certificate name', examples=['my website cert']
    )


class Status8(BaseModel):
    error: Optional[Error4] = Field(
        None,
        description='If issuance or renewal reports `failed`, this property contains information about what happened',
        examples=[None],
    )
    issuance: Optional[Issuance] = Field(
        None,
        description='Status of the issuance process of the Certificate',
        examples=['valid'],
    )
    renewal: Optional[Renewal] = Field(
        None,
        description='Status of the renewal process of the Certificate.',
        examples=['scheduled'],
    )


class Certificate3(BaseModel):
    certificate: str = Field(
        ...,
        description='Certificate and chain in PEM format, in order so that each record directly certifies the one preceding',
        examples=['-----BEGIN CERTIFICATE-----\n...'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    domain_names: List[str] = Field(
        ...,
        description='Domains and subdomains covered by the Certificate',
        examples=[['example.com', 'webmail.example.com', 'www.example.com']],
    )
    fingerprint: str = Field(
        ...,
        description='SHA256 fingerprint of the Certificate',
        examples=['03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    not_valid_after: str = Field(
        ...,
        description='Point in time when the Certificate stops being valid (in ISO-8601 format)',
        examples=['2019-07-08T09:59:59+00:00'],
    )
    not_valid_before: str = Field(
        ...,
        description='Point in time when the Certificate becomes valid (in ISO-8601 format)',
        examples=['2019-01-08T10:00:00+00:00'],
    )
    status: Optional[Status8] = Field(
        None,
        description='Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates',
    )
    type: Optional[Type] = Field(
        None, description='Type of the Certificate', examples=['uploaded']
    )
    used_by: List[UsedByItem] = Field(
        ..., description='Resources currently using the Certificate'
    )


class CertificatesIdPutResponse(BaseModel):
    certificate: Certificate3 = Field(..., title='Certificate')


class Sort4(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status9(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Error7(BaseModel):
    code: str = Field(
        ..., description='Fixed machine readable code', examples=['action_failed']
    )
    message: str = Field(
        ..., description='Humanized error message', examples=['Action failed']
    )


class Status10(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action3(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status10 = Field(..., description='Status of the Action')


class Meta2(BaseModel):
    pagination: Pagination


class CertificatesIdActionsGetResponse(BaseModel):
    actions: List[Action3]
    meta: Optional[Meta2] = None


class Status11(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status12(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action4(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status12 = Field(..., description='Status of the Action')


class CertificatesIdActionsRetryPostResponse(BaseModel):
    action: Action4 = Field(..., title='Action')


class Action5(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status12 = Field(..., description='Status of the Action')


class CertificatesIdActionsActionIdGetResponse(BaseModel):
    action: Action5 = Field(..., title='Action')


class Location(BaseModel):
    city: str = Field(
        ..., description='City the Location is closest to', examples=['Falkenstein']
    )
    country: str = Field(
        ...,
        description='ISO 3166-1 alpha-2 code of the country the Location resides in',
        examples=['DE'],
    )
    description: str = Field(
        ...,
        description='Description of the Location',
        examples=['Falkenstein DC Park 1'],
    )
    id: float = Field(..., description='ID of the Location', examples=[1])
    latitude: float = Field(
        ...,
        description='Latitude of the city closest to the Location',
        examples=[50.47612],
    )
    longitude: float = Field(
        ...,
        description='Longitude of the city closest to the Location',
        examples=[12.370071],
    )
    name: str = Field(
        ..., description='Unique identifier of the Location', examples=['fsn1']
    )
    network_zone: str = Field(
        ...,
        description='Name of network zone this Location resides in',
        examples=['eu-central'],
    )


class ServerTypes(BaseModel):
    available: List[float] = Field(
        ...,
        description='IDs of Server types that are supported and for which the Datacenter has enough resources left',
        examples=[[1, 2, 3]],
    )
    available_for_migration: List[float] = Field(
        ...,
        description='IDs of Server types that are supported and for which the Datacenter has enough resources left',
        examples=[[1, 2, 3]],
    )
    supported: List[float] = Field(
        ...,
        description='IDs of Server types that are supported in the Datacenter',
        examples=[[1, 2, 3]],
    )


class Datacenter(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class DatacentersGetResponse(BaseModel):
    datacenters: List[Datacenter]
    recommendation: float = Field(
        ...,
        description='The Datacenter which is recommended to be used to create new Servers.',
        examples=[1],
    )


class Datacenter1(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class DatacentersIdGetResponse(BaseModel):
    datacenter: Datacenter1


class Sort6(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Server(BaseModel):
    id: int = Field(..., description='ID of the Resource', examples=[42])


class Type7(Enum):
    server = 'server'


class AppliedToResource(BaseModel):
    server: Optional[Server] = None
    type: Optional[Type7] = Field(
        None, description='Type of resource referenced', examples=['server']
    )


class LabelSelector(BaseModel):
    selector: str = Field(..., description='Label selector', examples=['env=prod'])


class Type8(Enum):
    server = 'server'
    label_selector = 'label_selector'


class AppliedToItem(BaseModel):
    applied_to_resources: Optional[List[AppliedToResource]] = None
    label_selector: Optional[LabelSelector] = None
    server: Optional[Server] = None
    type: Type8 = Field(
        ..., description='Type of resource referenced', examples=['server']
    )


class Direction(Enum):
    in_ = 'in'
    out = 'out'


class Protocol(Enum):
    tcp = 'tcp'
    udp = 'udp'
    icmp = 'icmp'
    esp = 'esp'
    gre = 'gre'


class Rule(BaseModel):
    description: Optional[constr(max_length=255)] = Field(
        None, description='Description of the Rule'
    )
    destination_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )
    direction: Direction = Field(
        ...,
        description='Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
    )
    port: Optional[str] = Field(
        None,
        description='Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
        examples=['80'],
    )
    protocol: Protocol = Field(..., description='Type of traffic to allow')
    source_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )


class Firewall(BaseModel):
    applied_to: List[AppliedToItem]
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Optional[Dict[str, str]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    rules: List[Rule]


class Meta3(BaseModel):
    pagination: Pagination


class FirewallsGetResponse(BaseModel):
    firewalls: List[Firewall]
    meta: Optional[Meta3] = None


class LabelSelector1(BaseModel):
    selector: str = Field(..., description='Label selector')


class Server2(BaseModel):
    id: int = Field(..., description='ID of the Server')


class ApplyToItem(BaseModel):
    label_selector: Optional[LabelSelector1] = Field(
        None,
        description='Configuration for type LabelSelector, required if type is `label_selector`',
    )
    server: Optional[Server2] = Field(
        None, description='Configuration for type Server, required if type is `server`'
    )
    type: Type8 = Field(..., description='Type of the resource')


class Rule1(BaseModel):
    description: Optional[constr(max_length=255)] = Field(
        None, description='Description of the Rule'
    )
    destination_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )
    direction: Direction = Field(
        ...,
        description='Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
    )
    port: Optional[str] = Field(
        None,
        description='Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
        examples=['80'],
    )
    protocol: Protocol = Field(..., description='Type of traffic to allow')
    source_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )


class FirewallsPostRequest(BaseModel):
    apply_to: Optional[List[ApplyToItem]] = Field(
        None, description='Resources the Firewall should be applied to after creation'
    )
    labels: Optional[Dict[str, Any]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Firewall',
        examples=['Corporate Intranet Protection'],
    )
    rules: Optional[List[Rule1]] = Field(
        None,
        description='Array of rules',
        examples=[
            [
                {
                    'direction': 'in',
                    'port': '80',
                    'protocol': 'tcp',
                    'source_ips': [
                        '28.239.13.1/32',
                        '28.239.14.0/24',
                        'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
                    ],
                }
            ]
        ],
    )


class Action6(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status12 = Field(..., description='Status of the Action')


class Server3(BaseModel):
    id: int = Field(..., description='ID of the Resource', examples=[42])


class Type10(Enum):
    server = 'server'


class AppliedToResource1(BaseModel):
    server: Optional[Server3] = None
    type: Optional[Type10] = Field(
        None, description='Type of resource referenced', examples=['server']
    )


class LabelSelector2(BaseModel):
    selector: str = Field(..., description='Label selector', examples=['env=prod'])


class Type11(Enum):
    server = 'server'
    label_selector = 'label_selector'


class AppliedToItem1(BaseModel):
    applied_to_resources: Optional[List[AppliedToResource1]] = None
    label_selector: Optional[LabelSelector2] = None
    server: Optional[Server3] = None
    type: Type11 = Field(
        ..., description='Type of resource referenced', examples=['server']
    )


class Rule2(BaseModel):
    description: Optional[constr(max_length=255)] = Field(
        None, description='Description of the Rule'
    )
    destination_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )
    direction: Direction = Field(
        ...,
        description='Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
    )
    port: Optional[str] = Field(
        None,
        description='Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
        examples=['80'],
    )
    protocol: Protocol = Field(..., description='Type of traffic to allow')
    source_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )


class Firewall1(BaseModel):
    applied_to: List[AppliedToItem1]
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Optional[Dict[str, str]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    rules: List[Rule2]


class FirewallsPostResponse(BaseModel):
    actions: Optional[List[Action6]] = Field(
        None,
        examples=[
            [
                {
                    'command': 'set_firewall_rules',
                    'error': {'code': 'action_failed', 'message': 'Action failed'},
                    'finished': '2016-01-30T23:56:00+00:00',
                    'id': 13,
                    'progress': 100,
                    'resources': [{'id': 38, 'type': 'firewall'}],
                    'started': '2016-01-30T23:55:00+00:00',
                    'status': 'success',
                },
                {
                    'command': 'apply_firewall',
                    'error': {'code': 'action_failed', 'message': 'Action failed'},
                    'finished': '2016-01-30T23:56:00+00:00',
                    'id': 14,
                    'progress': 100,
                    'resources': [
                        {'id': 42, 'type': 'server'},
                        {'id': 38, 'type': 'firewall'},
                    ],
                    'started': '2016-01-30T23:55:00+00:00',
                    'status': 'success',
                },
            ]
        ],
    )
    firewall: Optional[Firewall1] = Field(None, title='Firewall')


class Type12(Enum):
    server = 'server'


class AppliedToResource2(BaseModel):
    server: Optional[Server3] = None
    type: Optional[Type12] = Field(
        None, description='Type of resource referenced', examples=['server']
    )


class Type13(Enum):
    server = 'server'
    label_selector = 'label_selector'


class AppliedToItem2(BaseModel):
    applied_to_resources: Optional[List[AppliedToResource2]] = None
    label_selector: Optional[LabelSelector2] = None
    server: Optional[Server3] = None
    type: Type13 = Field(
        ..., description='Type of resource referenced', examples=['server']
    )


class Rule3(BaseModel):
    description: Optional[constr(max_length=255)] = Field(
        None, description='Description of the Rule'
    )
    destination_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )
    direction: Direction = Field(
        ...,
        description='Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
    )
    port: Optional[str] = Field(
        None,
        description='Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
        examples=['80'],
    )
    protocol: Protocol = Field(..., description='Type of traffic to allow')
    source_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )


class Firewall2(BaseModel):
    applied_to: List[AppliedToItem2]
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Optional[Dict[str, str]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    rules: List[Rule3]


class FirewallsIdGetResponse(BaseModel):
    firewall: Firewall2 = Field(..., title='Firewall')


class FirewallsIdPutRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New Firewall name', examples=['new-name']
    )


class Type14(Enum):
    server = 'server'


class AppliedToResource3(BaseModel):
    server: Optional[Server3] = None
    type: Optional[Type14] = Field(
        None, description='Type of resource referenced', examples=['server']
    )


class Type15(Enum):
    server = 'server'
    label_selector = 'label_selector'


class AppliedToItem3(BaseModel):
    applied_to_resources: Optional[List[AppliedToResource3]] = None
    label_selector: Optional[LabelSelector2] = None
    server: Optional[Server3] = None
    type: Type15 = Field(
        ..., description='Type of resource referenced', examples=['server']
    )


class Rule4(BaseModel):
    description: Optional[constr(max_length=255)] = Field(
        None, description='Description of the Rule'
    )
    destination_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )
    direction: Direction = Field(
        ...,
        description='Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
    )
    port: Optional[str] = Field(
        None,
        description='Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
        examples=['80'],
    )
    protocol: Protocol = Field(..., description='Type of traffic to allow')
    source_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )


class Firewall3(BaseModel):
    applied_to: List[AppliedToItem3]
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Optional[Dict[str, str]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    rules: List[Rule4]


class FirewallsIdPutResponse(BaseModel):
    firewall: Firewall3 = Field(..., title='Firewall')


class Sort8(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status15(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status16(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action7(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status16 = Field(..., description='Status of the Action')


class Meta4(BaseModel):
    pagination: Pagination


class FirewallsIdActionsGetResponse(BaseModel):
    actions: List[Action7]
    meta: Optional[Meta4] = None


class Status17(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Server9(BaseModel):
    id: int = Field(..., description='ID of the Server')


class ApplyToItem1(BaseModel):
    label_selector: Optional[LabelSelector2] = Field(
        None,
        description='Configuration for type label_selector, required if type is `label_selector`',
    )
    server: Optional[Server9] = Field(
        None, description='Configuration for type server, required if type is `server`'
    )
    type: Optional[Type15] = Field(None, description='Type of the resource')


class FirewallsIdActionsApplyToResourcesPostRequest(BaseModel):
    apply_to: List[ApplyToItem1] = Field(
        ..., description='Resources the Firewall should be applied to'
    )


class Status18(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action8(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status18 = Field(..., description='Status of the Action')


class Meta5(BaseModel):
    pagination: Pagination


class FirewallsIdActionsApplyToResourcesPostResponse(BaseModel):
    actions: List[Action8]
    meta: Optional[Meta5] = None


class RemoveFromItem(BaseModel):
    label_selector: Optional[LabelSelector2] = Field(
        None,
        description='Configuration for type label_selector, required if type is `label_selector`',
    )
    server: Optional[Server9] = Field(
        None, description='Configuration for type server, required if type is `server`'
    )
    type: Optional[Type15] = Field(None, description='Type of the resource')


class FirewallsIdActionsRemoveFromResourcesPostRequest(BaseModel):
    remove_from: List[RemoveFromItem] = Field(
        ..., description='Resources the Firewall should be removed from'
    )


class Action9(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status18 = Field(..., description='Status of the Action')


class Meta6(BaseModel):
    pagination: Pagination


class FirewallsIdActionsRemoveFromResourcesPostResponse(BaseModel):
    actions: List[Action9]
    meta: Optional[Meta6] = None


class Rule5(BaseModel):
    description: Optional[constr(max_length=255)] = Field(
        None, description='Description of the Rule'
    )
    destination_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )
    direction: Direction = Field(
        ...,
        description='Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
    )
    port: Optional[str] = Field(
        None,
        description='Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
        examples=['80'],
    )
    protocol: Protocol = Field(..., description='Type of traffic to allow')
    source_ips: Optional[List[str]] = Field(
        None,
        description='List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.',
        examples=[
            [
                '28.239.13.1/32',
                '28.239.14.0/24',
                'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128',
            ]
        ],
    )


class FirewallsIdActionsSetRulesPostRequest(BaseModel):
    rules: List[Rule5] = Field(..., description='Array of rules', max_length=50)


class Action10(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status18 = Field(..., description='Status of the Action')


class Meta7(BaseModel):
    pagination: Pagination


class FirewallsIdActionsSetRulesPostResponse(BaseModel):
    actions: List[Action10]
    meta: Optional[Meta7] = None


class Action11(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status18 = Field(..., description='Status of the Action')


class FirewallsIdActionsActionIdGetResponse(BaseModel):
    action: Action11 = Field(..., title='Action')


class Sort10(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class DnsPtrItem(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='DNS pointer for the specific IP address',
        examples=['server.example.com'],
    )
    ip: str = Field(
        ..., description='Single IPv4 or IPv6 address', examples=['2001:db8::1']
    )


class HomeLocation(BaseModel):
    city: str = Field(
        ..., description='City the Location is closest to', examples=['Falkenstein']
    )
    country: str = Field(
        ...,
        description='ISO 3166-1 alpha-2 code of the country the Location resides in',
        examples=['DE'],
    )
    description: str = Field(
        ...,
        description='Description of the Location',
        examples=['Falkenstein DC Park 1'],
    )
    id: float = Field(..., description='ID of the Location', examples=[1])
    latitude: float = Field(
        ...,
        description='Latitude of the city closest to the Location',
        examples=[50.47612],
    )
    longitude: float = Field(
        ...,
        description='Longitude of the city closest to the Location',
        examples=[12.370071],
    )
    name: str = Field(
        ..., description='Unique identifier of the Location', examples=['fsn1']
    )
    network_zone: str = Field(
        ...,
        description='Name of network zone this Location resides in',
        examples=['eu-central'],
    )


class Protection(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Resource from being deleted',
        examples=[False],
    )


class Type18(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class FloatingIp(BaseModel):
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Resource',
        examples=['this describes my resource'],
    )
    dns_ptr: List[DnsPtrItem] = Field(..., description='Array of reverse DNS entries')
    home_location: HomeLocation = Field(
        ...,
        description='Location the Floating IP was created in. Routing is optimized for this Location.',
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Floating IP is assigned to, null if it is not assigned at all',
        examples=[42],
    )
    type: Type18 = Field(..., description='Type of the Floating IP')


class Meta8(BaseModel):
    pagination: Pagination


class FloatingIpsGetResponse(BaseModel):
    floating_ips: List[FloatingIp]
    meta: Optional[Meta8] = None


class FloatingIpsPostRequest(BaseModel):
    description: Optional[str] = Field(None, examples=['Web Frontend'])
    home_location: Optional[str] = Field(
        None,
        description='Home Location (routing is optimized for that Location). Only optional if Server argument is passed.',
        examples=['fsn1'],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(None, examples=['Web Frontend'])
    server: Optional[int] = Field(
        None, description='Server to assign the Floating IP to', examples=[42]
    )
    type: Type18 = Field(..., description='Floating IP type')


class Action12(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status18 = Field(..., description='Status of the Action')


class FloatingIp1(BaseModel):
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Resource',
        examples=['this describes my resource'],
    )
    dns_ptr: List[DnsPtrItem] = Field(..., description='Array of reverse DNS entries')
    home_location: HomeLocation = Field(
        ...,
        description='Location the Floating IP was created in. Routing is optimized for this Location.',
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Floating IP is assigned to, null if it is not assigned at all',
        examples=[42],
    )
    type: Type18 = Field(..., description='Type of the Floating IP')


class FloatingIpsPostResponse(BaseModel):
    action: Optional[Action12] = Field(None, title='Action')
    floating_ip: FloatingIp1


class FloatingIp2(BaseModel):
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Resource',
        examples=['this describes my resource'],
    )
    dns_ptr: List[DnsPtrItem] = Field(..., description='Array of reverse DNS entries')
    home_location: HomeLocation = Field(
        ...,
        description='Location the Floating IP was created in. Routing is optimized for this Location.',
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Floating IP is assigned to, null if it is not assigned at all',
        examples=[42],
    )
    type: Type18 = Field(..., description='Type of the Floating IP')


class FloatingIpsIdGetResponse(BaseModel):
    floating_ip: FloatingIp2


class FloatingIpsIdPutRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='New Description to set', examples=['Web Frontend']
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New unique name to set', examples=['Web Frontend']
    )


class FloatingIp3(BaseModel):
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Resource',
        examples=['this describes my resource'],
    )
    dns_ptr: List[DnsPtrItem] = Field(..., description='Array of reverse DNS entries')
    home_location: HomeLocation = Field(
        ...,
        description='Location the Floating IP was created in. Routing is optimized for this Location.',
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Floating IP is assigned to, null if it is not assigned at all',
        examples=[42],
    )
    type: Type18 = Field(..., description='Type of the Floating IP')


class FloatingIpsIdPutResponse(BaseModel):
    floating_ip: FloatingIp3


class Sort12(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status23(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status24(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action13(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status24 = Field(..., description='Status of the Action')


class FloatingIpsIdActionsGetResponse(BaseModel):
    actions: List[Action13]


class Status25(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class FloatingIpsIdActionsAssignPostRequest(BaseModel):
    server: int = Field(
        ...,
        description='ID of the Server the Floating IP shall be assigned to',
        examples=[42],
    )


class Status26(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action14(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status26 = Field(..., description='Status of the Action')


class FloatingIpsIdActionsAssignPostResponse(BaseModel):
    action: Action14 = Field(..., title='Action')


class FloatingIpsIdActionsChangeDnsPtrPostRequest(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='Hostname to set as a reverse DNS PTR entry, will reset to original default value if `null`',
        examples=['server02.example.com'],
    )
    ip: str = Field(
        ...,
        description='IP address for which to set the reverse DNS entry',
        examples=['1.2.3.4'],
    )


class Action15(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status26 = Field(..., description='Status of the Action')


class FloatingIpsIdActionsChangeDnsPtrPostResponse(BaseModel):
    action: Action15 = Field(..., title='Action')


class FloatingIpsIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the Floating IP from being deleted',
        examples=[True],
    )


class Action16(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status26 = Field(..., description='Status of the Action')


class FloatingIpsIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action16 = Field(..., title='Action')


class Action17(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status26 = Field(..., description='Status of the Action')


class FloatingIpsIdActionsUnassignPostResponse(BaseModel):
    action: Action17 = Field(..., title='Action')


class Action18(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status26 = Field(..., description='Status of the Action')


class FloatingIpsIdActionsActionIdGetResponse(BaseModel):
    action: Action18 = Field(..., title='Action')


class Sort14(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Type23(Enum):
    system = 'system'
    snapshot = 'snapshot'
    backup = 'backup'
    app = 'app'


class Status31(Enum):
    available = 'available'
    creating = 'creating'


class CreatedFrom(BaseModel):
    id: int = Field(
        ..., description='ID of the Server the Image was created from', examples=[1]
    )
    name: str = Field(
        ...,
        description='Server name at the time the Image was created',
        examples=['Server'],
    )


class OsFlavor(Enum):
    ubuntu = 'ubuntu'
    centos = 'centos'
    debian = 'debian'
    fedora = 'fedora'
    unknown = 'unknown'


class Status32(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type24(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status32 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type24 = Field(..., description='Type of the Image', examples=['snapshot'])


class Meta9(BaseModel):
    pagination: Pagination


class ImagesGetResponse(BaseModel):
    images: List[Image]
    meta: Optional[Meta9] = None


class Type25(Enum):
    system = 'system'
    snapshot = 'snapshot'
    backup = 'backup'
    app = 'app'


class Status33(Enum):
    available = 'available'
    creating = 'creating'


class Status34(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type26(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image1(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status34 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type26 = Field(..., description='Type of the Image', examples=['snapshot'])


class ImagesIdGetResponse(BaseModel):
    image: Optional[Image1] = None


class Type27(Enum):
    snapshot = 'snapshot'


class ImagesIdPutRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='New description of Image',
        examples=['My new Image description'],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    type: Optional[Type27] = Field(
        None, description='Destination Image type to convert to'
    )


class Type28(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image2(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status34 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type28 = Field(..., description='Type of the Image', examples=['snapshot'])


class ImagesIdPutResponse(BaseModel):
    image: Optional[Image2] = None


class Sort16(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status36(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status37(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action19(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status37 = Field(..., description='Status of the Action')


class Meta10(BaseModel):
    pagination: Pagination


class ImagesIdActionsGetResponse(BaseModel):
    actions: List[Action19]
    meta: Optional[Meta10] = None


class Status38(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class ImagesIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the snapshot from being deleted',
        examples=[True],
    )


class Status39(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action20(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status39 = Field(..., description='Status of the Action')


class ImagesIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action20 = Field(..., title='Action')


class Action21(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status39 = Field(..., description='Status of the Action')


class ImagesIdActionsActionIdGetResponse(BaseModel):
    action: Action21 = Field(..., title='Action')


class Type29(Enum):
    public = 'public'
    private = 'private'


class Iso(BaseModel):
    deprecated: str = Field(
        ...,
        description='ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the ISO', examples=['FreeBSD 11.0 x64']
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    name: str = Field(
        ...,
        description='Unique identifier of the ISO. Only set for public ISOs',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )
    type: Type29 = Field(..., description='Type of the ISO')


class Meta11(BaseModel):
    pagination: Pagination


class IsosGetResponse(BaseModel):
    isos: List[Iso]
    meta: Optional[Meta11] = None


class Iso1(BaseModel):
    deprecated: str = Field(
        ...,
        description='ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the ISO', examples=['FreeBSD 11.0 x64']
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    name: str = Field(
        ...,
        description='Unique identifier of the ISO. Only set for public ISOs',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )
    type: Type29 = Field(..., description='Type of the ISO')


class IsosIdGetResponse(BaseModel):
    iso: Iso1


class PriceHourly(BaseModel):
    gross: str = Field(
        ..., description='Price with VAT added', examples=['1.1900000000000000']
    )
    net: str = Field(..., description='Price without VAT', examples=['1.0000000000'])


class PriceMonthly(BaseModel):
    gross: str = Field(
        ..., description='Price with VAT added', examples=['1.1900000000000000']
    )
    net: str = Field(..., description='Price without VAT', examples=['1.0000000000'])


class Price(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Resource in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Resource in this Location'
    )


class LoadBalancerType(BaseModel):
    deprecated: str = Field(
        ...,
        description='Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the Load Balancer type', examples=['LB11']
    )
    id: float = Field(..., description='ID of the Load Balancer type', examples=[1])
    max_assigned_certificates: float = Field(
        ...,
        description='Number of SSL Certificates that can be assigned to a single Load Balancer',
        examples=[10],
    )
    max_connections: float = Field(
        ...,
        description='Number of maximum simultaneous open connections',
        examples=[20000],
    )
    max_services: float = Field(
        ...,
        description='Number of services a Load Balancer of this type can have',
        examples=[5],
    )
    max_targets: float = Field(
        ...,
        description='Number of targets a single Load Balancer can have',
        examples=[25],
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Load Balancer type',
        examples=['lb11'],
    )
    prices: List[Price] = Field(..., description='Prices in different network zones')


class LoadBalancerTypesGetResponse(BaseModel):
    load_balancer_types: List[LoadBalancerType]


class Price1(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Resource in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Resource in this Location'
    )


class LoadBalancerType1(BaseModel):
    deprecated: str = Field(
        ...,
        description='Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the Load Balancer type', examples=['LB11']
    )
    id: float = Field(..., description='ID of the Load Balancer type', examples=[1])
    max_assigned_certificates: float = Field(
        ...,
        description='Number of SSL Certificates that can be assigned to a single Load Balancer',
        examples=[10],
    )
    max_connections: float = Field(
        ...,
        description='Number of maximum simultaneous open connections',
        examples=[20000],
    )
    max_services: float = Field(
        ...,
        description='Number of services a Load Balancer of this type can have',
        examples=[5],
    )
    max_targets: float = Field(
        ...,
        description='Number of targets a single Load Balancer can have',
        examples=[25],
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Load Balancer type',
        examples=['lb11'],
    )
    prices: List[Price1] = Field(..., description='Prices in different network zones')


class LoadBalancerTypesIdGetResponse(BaseModel):
    load_balancer_type: Optional[LoadBalancerType1] = None


class Sort18(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Type31(Enum):
    round_robin = 'round_robin'
    least_connections = 'least_connections'


class Algorithm(BaseModel):
    type: Type31 = Field(..., description='Type of the algorithm')


class Price2(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Resource in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Resource in this Location'
    )


class LoadBalancerType2(BaseModel):
    deprecated: str = Field(
        ...,
        description='Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the Load Balancer type', examples=['LB11']
    )
    id: float = Field(..., description='ID of the Load Balancer type', examples=[1])
    max_assigned_certificates: float = Field(
        ...,
        description='Number of SSL Certificates that can be assigned to a single Load Balancer',
        examples=[10],
    )
    max_connections: float = Field(
        ...,
        description='Number of maximum simultaneous open connections',
        examples=[20000],
    )
    max_services: float = Field(
        ...,
        description='Number of services a Load Balancer of this type can have',
        examples=[5],
    )
    max_targets: float = Field(
        ...,
        description='Number of targets a single Load Balancer can have',
        examples=[25],
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Load Balancer type',
        examples=['lb11'],
    )
    prices: List[Price2] = Field(..., description='Prices in different network zones')


class PrivateNetItem(BaseModel):
    ip: Optional[str] = Field(None, examples=['10.0.0.2'])
    network: Optional[int] = Field(None, examples=[4711])


class Ipv4(BaseModel):
    dns_ptr: Optional[str] = Field(
        None,
        description='Reverse DNS PTR entry for the IPv4 address of this Load Balancer',
        examples=['lb1.example.com'],
    )
    ip: Optional[str] = Field(
        None, description='IP address (v4) of this Load Balancer', examples=['1.2.3.4']
    )


class Ipv6(BaseModel):
    dns_ptr: Optional[str] = Field(
        None,
        description='Reverse DNS PTR entry for the IPv6 address of this Load Balancer',
        examples=['lb1.example.com'],
    )
    ip: Optional[str] = Field(
        None,
        description='IP address (v6) of this Load Balancer',
        examples=['2001:db8::1'],
    )


class PublicNet(BaseModel):
    enabled: bool = Field(..., description='Public Interface enabled or not')
    ipv4: Ipv4 = Field(..., description='IP address (v4)')
    ipv6: Ipv6 = Field(..., description='IP address (v6)')


class Http(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol6(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol6 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http1(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol7(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class Service(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http1] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol7 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class Status41(Enum):
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    unknown = 'unknown'


class HealthStatu(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status41] = Field(None, examples=['healthy'])


class Ip(BaseModel):
    ip: str = Field(
        ...,
        description='IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.',
        examples=['203.0.113.1'],
    )


class Server11(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[80])


class HealthStatu1(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status41] = Field(None, examples=['healthy'])


class Server12(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[85])


class Target1(BaseModel):
    health_status: Optional[List[HealthStatu1]] = None
    server: Optional[Server12] = None
    type: Optional[str] = Field(None, examples=['server'])
    use_private_ip: Optional[bool] = Field(None, examples=[False])


class Type32(Enum):
    server = 'server'
    label_selector = 'label_selector'
    ip = 'ip'


class Target(BaseModel):
    health_status: Optional[List[HealthStatu]] = Field(
        None, description='List of health statuses of the services on this target'
    )
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None, description='Label selector and a list of selected targets'
    )
    server: Optional[Server11] = Field(
        None,
        description='Server where the traffic should be routed through',
        title='LoadBalancerTargetServer',
    )
    targets: Optional[List[Target1]] = Field(
        None, description='List of selected targets'
    )
    type: Type32 = Field(..., description='Type of the resource')
    use_private_ip: Optional[bool] = Field(
        None,
        description='Use the private network IP instead of the public IP. Default value is false.',
    )


class LoadBalancer(BaseModel):
    algorithm: Algorithm = Field(..., description='Algorithm of the Load Balancer')
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    included_traffic: int = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[10000],
    )
    ingoing_traffic: int = Field(
        ..., description='Inbound Traffic for the current billing period in bytes'
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancer_type: LoadBalancerType2
    location: Location
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    outgoing_traffic: int = Field(
        ..., description='Outbound Traffic for the current billing period in bytes'
    )
    private_net: List[PrivateNetItem] = Field(
        ..., description='Private networks information'
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    public_net: PublicNet = Field(..., description='Public network information')
    services: List[Service] = Field(
        ..., description='List of services that belong to this Load Balancer'
    )
    targets: List[Target] = Field(
        ..., description='List of targets that belong to this Load Balancer'
    )


class Meta12(BaseModel):
    pagination: Pagination


class LoadBalancersGetResponse(BaseModel):
    load_balancers: List[LoadBalancer]
    meta: Optional[Meta12] = None


class Type33(Enum):
    round_robin = 'round_robin'
    least_connections = 'least_connections'


class Algorithm1(BaseModel):
    type: Type33 = Field(..., description='Type of the algorithm')


class Labels(BaseModel):
    labelkey: Optional[str] = Field(None, description='New label', examples=['value'])


class Http2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol8(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http2] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol8 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http3(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol9(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class Service1(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck1 = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http3] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol9 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class HealthStatu2(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status41] = Field(None, examples=['healthy'])


class Server13(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[80])


class HealthStatu3(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status41] = Field(None, examples=['healthy'])


class Server14(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[85])


class Target3(BaseModel):
    health_status: Optional[List[HealthStatu3]] = None
    server: Optional[Server14] = None
    type: Optional[str] = Field(None, examples=['server'])
    use_private_ip: Optional[bool] = Field(None, examples=[False])


class Type34(Enum):
    server = 'server'
    label_selector = 'label_selector'
    ip = 'ip'


class Target2(BaseModel):
    health_status: Optional[List[HealthStatu2]] = Field(
        None, description='List of health statuses of the services on this target'
    )
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None, description='Label selector and a list of selected targets'
    )
    server: Optional[Server13] = Field(
        None,
        description='Server where the traffic should be routed through',
        title='LoadBalancerTargetServer',
    )
    targets: Optional[List[Target3]] = Field(
        None, description='List of selected targets'
    )
    type: Type34 = Field(..., description='Type of the resource')
    use_private_ip: Optional[bool] = Field(
        None,
        description='Use the private network IP instead of the public IP. Default value is false.',
    )


class LoadBalancersPostRequest(BaseModel):
    algorithm: Algorithm1 = Field(
        ..., description='Algorithm of the Load Balancer', title='LoadBalancerAlgorithm'
    )
    labels: Optional[Labels] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    load_balancer_type: str = Field(
        ...,
        description='ID or name of the Load Balancer type this Load Balancer should be created with',
        examples=['lb11'],
    )
    location: Optional[str] = Field(
        None, description='ID or name of Location to create Load Balancer in'
    )
    name: str = Field(
        ..., description='Name of the Load Balancer', examples=['Web Frontend']
    )
    network: Optional[int] = Field(
        None,
        description='ID of the network the Load Balancer should be attached to on creation',
        examples=[123],
    )
    network_zone: Optional[str] = Field(
        None, description='Name of network zone', examples=['eu-central']
    )
    public_interface: Optional[bool] = Field(
        None,
        description='Enable or disable the public interface of the Load Balancer',
        examples=[True],
    )
    services: Optional[List[Service1]] = Field(None, description='Array of services')
    targets: Optional[List[Target2]] = Field(None, description='Array of targets')


class Status45(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action22(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status45 = Field(..., description='Status of the Action')


class Type35(Enum):
    round_robin = 'round_robin'
    least_connections = 'least_connections'


class Algorithm2(BaseModel):
    type: Type35 = Field(..., description='Type of the algorithm')


class Price3(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Resource in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Resource in this Location'
    )


class LoadBalancerType3(BaseModel):
    deprecated: str = Field(
        ...,
        description='Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the Load Balancer type', examples=['LB11']
    )
    id: float = Field(..., description='ID of the Load Balancer type', examples=[1])
    max_assigned_certificates: float = Field(
        ...,
        description='Number of SSL Certificates that can be assigned to a single Load Balancer',
        examples=[10],
    )
    max_connections: float = Field(
        ...,
        description='Number of maximum simultaneous open connections',
        examples=[20000],
    )
    max_services: float = Field(
        ...,
        description='Number of services a Load Balancer of this type can have',
        examples=[5],
    )
    max_targets: float = Field(
        ...,
        description='Number of targets a single Load Balancer can have',
        examples=[25],
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Load Balancer type',
        examples=['lb11'],
    )
    prices: List[Price3] = Field(..., description='Prices in different network zones')


class PublicNet1(BaseModel):
    enabled: bool = Field(..., description='Public Interface enabled or not')
    ipv4: Ipv4 = Field(..., description='IP address (v4)')
    ipv6: Ipv6 = Field(..., description='IP address (v6)')


class Http4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol10(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http4] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol10 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http5(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol11(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class Service2(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck2 = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http5] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol11 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class Status46(Enum):
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    unknown = 'unknown'


class HealthStatu4(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status46] = Field(None, examples=['healthy'])


class Server15(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[80])


class HealthStatu5(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status46] = Field(None, examples=['healthy'])


class Server16(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[85])


class Target5(BaseModel):
    health_status: Optional[List[HealthStatu5]] = None
    server: Optional[Server16] = None
    type: Optional[str] = Field(None, examples=['server'])
    use_private_ip: Optional[bool] = Field(None, examples=[False])


class Type36(Enum):
    server = 'server'
    label_selector = 'label_selector'
    ip = 'ip'


class Target4(BaseModel):
    health_status: Optional[List[HealthStatu4]] = Field(
        None, description='List of health statuses of the services on this target'
    )
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None, description='Label selector and a list of selected targets'
    )
    server: Optional[Server15] = Field(
        None,
        description='Server where the traffic should be routed through',
        title='LoadBalancerTargetServer',
    )
    targets: Optional[List[Target5]] = Field(
        None, description='List of selected targets'
    )
    type: Type36 = Field(..., description='Type of the resource')
    use_private_ip: Optional[bool] = Field(
        None,
        description='Use the private network IP instead of the public IP. Default value is false.',
    )


class LoadBalancer1(BaseModel):
    algorithm: Algorithm2 = Field(..., description='Algorithm of the Load Balancer')
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    included_traffic: int = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[10000],
    )
    ingoing_traffic: int = Field(
        ..., description='Inbound Traffic for the current billing period in bytes'
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancer_type: LoadBalancerType3
    location: Location
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    outgoing_traffic: int = Field(
        ..., description='Outbound Traffic for the current billing period in bytes'
    )
    private_net: List[PrivateNetItem] = Field(
        ..., description='Private networks information'
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    public_net: PublicNet1 = Field(..., description='Public network information')
    services: List[Service2] = Field(
        ..., description='List of services that belong to this Load Balancer'
    )
    targets: List[Target4] = Field(
        ..., description='List of targets that belong to this Load Balancer'
    )


class LoadBalancersPostResponse(BaseModel):
    action: Action22 = Field(..., title='Action')
    load_balancer: LoadBalancer1


class Type37(Enum):
    round_robin = 'round_robin'
    least_connections = 'least_connections'


class Algorithm3(BaseModel):
    type: Type37 = Field(..., description='Type of the algorithm')


class Price4(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Resource in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Resource in this Location'
    )


class LoadBalancerType4(BaseModel):
    deprecated: str = Field(
        ...,
        description='Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the Load Balancer type', examples=['LB11']
    )
    id: float = Field(..., description='ID of the Load Balancer type', examples=[1])
    max_assigned_certificates: float = Field(
        ...,
        description='Number of SSL Certificates that can be assigned to a single Load Balancer',
        examples=[10],
    )
    max_connections: float = Field(
        ...,
        description='Number of maximum simultaneous open connections',
        examples=[20000],
    )
    max_services: float = Field(
        ...,
        description='Number of services a Load Balancer of this type can have',
        examples=[5],
    )
    max_targets: float = Field(
        ...,
        description='Number of targets a single Load Balancer can have',
        examples=[25],
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Load Balancer type',
        examples=['lb11'],
    )
    prices: List[Price4] = Field(..., description='Prices in different network zones')


class PublicNet2(BaseModel):
    enabled: bool = Field(..., description='Public Interface enabled or not')
    ipv4: Ipv4 = Field(..., description='IP address (v4)')
    ipv6: Ipv6 = Field(..., description='IP address (v6)')


class Http6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol12(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http6] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol12 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http7(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol13(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class Service3(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck3 = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http7] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol13 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class HealthStatu6(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status46] = Field(None, examples=['healthy'])


class Server17(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[80])


class HealthStatu7(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status46] = Field(None, examples=['healthy'])


class Server18(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[85])


class Target7(BaseModel):
    health_status: Optional[List[HealthStatu7]] = None
    server: Optional[Server18] = None
    type: Optional[str] = Field(None, examples=['server'])
    use_private_ip: Optional[bool] = Field(None, examples=[False])


class Type38(Enum):
    server = 'server'
    label_selector = 'label_selector'
    ip = 'ip'


class Target6(BaseModel):
    health_status: Optional[List[HealthStatu6]] = Field(
        None, description='List of health statuses of the services on this target'
    )
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None, description='Label selector and a list of selected targets'
    )
    server: Optional[Server17] = Field(
        None,
        description='Server where the traffic should be routed through',
        title='LoadBalancerTargetServer',
    )
    targets: Optional[List[Target7]] = Field(
        None, description='List of selected targets'
    )
    type: Type38 = Field(..., description='Type of the resource')
    use_private_ip: Optional[bool] = Field(
        None,
        description='Use the private network IP instead of the public IP. Default value is false.',
    )


class LoadBalancer2(BaseModel):
    algorithm: Algorithm3 = Field(..., description='Algorithm of the Load Balancer')
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    included_traffic: int = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[10000],
    )
    ingoing_traffic: int = Field(
        ..., description='Inbound Traffic for the current billing period in bytes'
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancer_type: LoadBalancerType4
    location: Location
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    outgoing_traffic: int = Field(
        ..., description='Outbound Traffic for the current billing period in bytes'
    )
    private_net: List[PrivateNetItem] = Field(
        ..., description='Private networks information'
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    public_net: PublicNet2 = Field(..., description='Public network information')
    services: List[Service3] = Field(
        ..., description='List of services that belong to this Load Balancer'
    )
    targets: List[Target6] = Field(
        ..., description='List of targets that belong to this Load Balancer'
    )


class LoadBalancersIdGetResponse(BaseModel):
    load_balancer: LoadBalancer2


class LoadBalancersIdPutRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New Load Balancer name', examples=['new-name']
    )


class Type39(Enum):
    round_robin = 'round_robin'
    least_connections = 'least_connections'


class Algorithm4(BaseModel):
    type: Type39 = Field(..., description='Type of the algorithm')


class Price5(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Resource in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Resource in this Location'
    )


class LoadBalancerType5(BaseModel):
    deprecated: str = Field(
        ...,
        description='Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the Load Balancer type', examples=['LB11']
    )
    id: float = Field(..., description='ID of the Load Balancer type', examples=[1])
    max_assigned_certificates: float = Field(
        ...,
        description='Number of SSL Certificates that can be assigned to a single Load Balancer',
        examples=[10],
    )
    max_connections: float = Field(
        ...,
        description='Number of maximum simultaneous open connections',
        examples=[20000],
    )
    max_services: float = Field(
        ...,
        description='Number of services a Load Balancer of this type can have',
        examples=[5],
    )
    max_targets: float = Field(
        ...,
        description='Number of targets a single Load Balancer can have',
        examples=[25],
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Load Balancer type',
        examples=['lb11'],
    )
    prices: List[Price5] = Field(..., description='Prices in different network zones')


class PublicNet3(BaseModel):
    enabled: bool = Field(..., description='Public Interface enabled or not')
    ipv4: Ipv4 = Field(..., description='IP address (v4)')
    ipv6: Ipv6 = Field(..., description='IP address (v6)')


class Http8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol14(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http8] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol14 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http9(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol15(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class Service4(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck4 = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http9] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol15 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class HealthStatu8(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status46] = Field(None, examples=['healthy'])


class Server19(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[80])


class HealthStatu9(BaseModel):
    listen_port: Optional[int] = Field(None, examples=[443])
    status: Optional[Status46] = Field(None, examples=['healthy'])


class Server20(BaseModel):
    id: int = Field(..., description='ID of the Server', examples=[85])


class Target9(BaseModel):
    health_status: Optional[List[HealthStatu9]] = None
    server: Optional[Server20] = None
    type: Optional[str] = Field(None, examples=['server'])
    use_private_ip: Optional[bool] = Field(None, examples=[False])


class Type40(Enum):
    server = 'server'
    label_selector = 'label_selector'
    ip = 'ip'


class Target8(BaseModel):
    health_status: Optional[List[HealthStatu8]] = Field(
        None, description='List of health statuses of the services on this target'
    )
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None, description='Label selector and a list of selected targets'
    )
    server: Optional[Server19] = Field(
        None,
        description='Server where the traffic should be routed through',
        title='LoadBalancerTargetServer',
    )
    targets: Optional[List[Target9]] = Field(
        None, description='List of selected targets'
    )
    type: Type40 = Field(..., description='Type of the resource')
    use_private_ip: Optional[bool] = Field(
        None,
        description='Use the private network IP instead of the public IP. Default value is false.',
    )


class LoadBalancer3(BaseModel):
    algorithm: Algorithm4 = Field(..., description='Algorithm of the Load Balancer')
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    included_traffic: int = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[10000],
    )
    ingoing_traffic: int = Field(
        ..., description='Inbound Traffic for the current billing period in bytes'
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancer_type: LoadBalancerType5
    location: Location
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    outgoing_traffic: int = Field(
        ..., description='Outbound Traffic for the current billing period in bytes'
    )
    private_net: List[PrivateNetItem] = Field(
        ..., description='Private networks information'
    )
    protection: Protection = Field(
        ..., description='Protection configuration for the Resource'
    )
    public_net: PublicNet3 = Field(..., description='Public network information')
    services: List[Service4] = Field(
        ..., description='List of services that belong to this Load Balancer'
    )
    targets: List[Target8] = Field(
        ..., description='List of targets that belong to this Load Balancer'
    )


class LoadBalancersIdPutResponse(BaseModel):
    load_balancer: LoadBalancer3


class Sort20(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status52(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status53(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action23(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status53 = Field(..., description='Status of the Action')


class Meta13(BaseModel):
    pagination: Pagination


class LoadBalancersIdActionsGetResponse(BaseModel):
    actions: List[Action23]
    meta: Optional[Meta13] = None


class Status54(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Http10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol16(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http10] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol16 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http11(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol17(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class LoadBalancersIdActionsAddServicePostRequest(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck5 = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http11] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol17 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class Status55(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action24(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsAddServicePostResponse(BaseModel):
    action: Action24 = Field(..., title='Action')


class Server21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: float = Field(..., description='ID of the Server', examples=[80])


class LoadBalancersIdActionsAddTargetPostRequest(BaseModel):
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None,
        description='Configuration for label selector targets, required if type is `label_selector`',
    )
    server: Optional[Server21] = Field(
        None, description='Configuration for type Server, required if type is `server`'
    )
    type: Type40 = Field(..., description='Type of the resource')
    use_private_ip: Optional[bool] = Field(
        None,
        description='Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network. Default value is false.',
        examples=[True],
    )


class Action25(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsAddTargetPostResponse(BaseModel):
    action: Action25 = Field(..., title='Action')


class LoadBalancersIdActionsAttachToNetworkPostRequest(BaseModel):
    ip: Optional[str] = Field(
        None,
        description='IP to request to be assigned to this Load Balancer; if you do not provide this then you will be auto assigned an IP address',
        examples=['10.0.1.1'],
    )
    network: float = Field(
        ...,
        description='ID of an existing network to attach the Load Balancer to',
        examples=[4711],
    )


class Action26(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsAttachToNetworkPostResponse(BaseModel):
    action: Action26 = Field(..., title='Action')


class Type42(Enum):
    round_robin = 'round_robin'
    least_connections = 'least_connections'


class LoadBalancersIdActionsChangeAlgorithmPostRequest(BaseModel):
    type: Type42 = Field(..., description='Algorithm of the Load Balancer')


class Action27(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsChangeAlgorithmPostResponse(BaseModel):
    action: Action27 = Field(..., title='Action')


class LoadBalancersIdActionsChangeDnsPtrPostRequest(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='Hostname to set as a reverse DNS PTR entry',
        examples=['lb1.example.com'],
    )
    ip: str = Field(
        ...,
        description='Public IP address for which the reverse DNS entry should be set',
        examples=['1.2.3.4'],
    )


class Action28(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsChangeDnsPtrPostResponse(BaseModel):
    action: Action28 = Field(..., title='Action')


class LoadBalancersIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the Load Balancer from being deleted',
        examples=[True],
    )


class Action29(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action29 = Field(..., title='Action')


class LoadBalancersIdActionsChangeTypePostRequest(BaseModel):
    load_balancer_type: str = Field(
        ...,
        description='ID or name of Load Balancer type the Load Balancer should migrate to',
        examples=['lb21'],
    )


class Action30(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsChangeTypePostResponse(BaseModel):
    action: Action30 = Field(..., title='Action')


class LoadBalancersIdActionsDeleteServicePostRequest(BaseModel):
    listen_port: float = Field(
        ...,
        description='The listen port of the service you want to delete',
        examples=[4711],
    )


class Action31(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsDeleteServicePostResponse(BaseModel):
    action: Action31 = Field(..., title='Action')


class LoadBalancersIdActionsDetachFromNetworkPostRequest(BaseModel):
    network: float = Field(
        ...,
        description='ID of an existing network to detach the Load Balancer from',
        examples=[4711],
    )


class Action32(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsDetachFromNetworkPostResponse(BaseModel):
    action: Action32 = Field(..., title='Action')


class Action33(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsDisablePublicInterfacePostResponse(BaseModel):
    action: Action33 = Field(..., title='Action')


class Action34(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsEnablePublicInterfacePostResponse(BaseModel):
    action: Action34 = Field(..., title='Action')


class Type43(Enum):
    server = 'server'
    label_selector = 'label_selector'
    ip = 'ip'


class LoadBalancersIdActionsRemoveTargetPostRequest(BaseModel):
    ip: Optional[Ip] = Field(
        None,
        description='IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.',
    )
    label_selector: Optional[LabelSelector2] = Field(
        None,
        description='Configuration for label selector targets, required if type is `label_selector`',
    )
    server: Optional[Server21] = Field(
        None, description='Configuration for type Server, required if type is `server`'
    )
    type: Type43 = Field(..., description='Type of the resource')


class Action35(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsRemoveTargetPostResponse(BaseModel):
    action: Action35 = Field(..., title='Action')


class Http12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
        examples=['example.com'],
    )
    path: str = Field(
        ...,
        description='HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
        examples=['/'],
    )
    response: Optional[str] = Field(
        None,
        description='String that must be contained in HTTP response in order to pass the health check',
        examples=['{"status": "ok"}'],
    )
    status_codes: Optional[List[str]] = Field(
        None,
        description='List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.',
        examples=[['2??', '3??']],
    )
    tls: Optional[bool] = Field(
        None, description='Use HTTPS for health check', examples=[False]
    )


class Protocol18(Enum):
    tcp = 'tcp'
    http = 'http'


class HealthCheck6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    http: Optional[Http12] = Field(
        None, description='Additional configuration for protocol http'
    )
    interval: int = Field(
        ...,
        description='Time interval in seconds health checks are performed',
        examples=[15],
    )
    port: int = Field(
        ..., description='Port the health check will be performed on', examples=[4711]
    )
    protocol: Protocol18 = Field(
        ..., description='Type of the health check', examples=['http']
    )
    retries: int = Field(
        ...,
        description='Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
        examples=[3],
    )
    timeout: int = Field(
        ...,
        description='Time in seconds after an attempt is considered a timeout',
        examples=[10],
    )


class Http13(BaseModel):
    certificates: Optional[List[int]] = Field(
        None,
        description='IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"',
        examples=[[897]],
    )
    cookie_lifetime: Optional[int] = Field(
        None,
        description='Lifetime of the cookie used for sticky sessions',
        examples=[300],
    )
    cookie_name: Optional[str] = Field(
        None,
        description='Name of the cookie used for sticky sessions',
        examples=['HCLBSTICKY'],
    )
    redirect_http: Optional[bool] = Field(
        None,
        description='Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`',
        examples=[True],
    )
    sticky_sessions: Optional[bool] = Field(
        None,
        description='Use sticky sessions. Only available if protocol is "http" or "https". Default `false`',
        examples=[True],
    )


class Protocol19(Enum):
    tcp = 'tcp'
    http = 'http'
    https = 'https'


class LoadBalancersIdActionsUpdateServicePostRequest(BaseModel):
    destination_port: int = Field(
        ..., description='Port the Load Balancer will balance to', examples=[80]
    )
    health_check: HealthCheck6 = Field(
        ..., description='Service health check', title='LoadBalancerServiceHealthCheck'
    )
    http: Optional[Http13] = Field(
        None,
        description='Configuration option for protocols http and https',
        title='LoadBalancerServiceHTTP',
    )
    listen_port: int = Field(
        ..., description='Port the Load Balancer listens on', examples=[443]
    )
    protocol: Protocol19 = Field(
        ..., description='Protocol of the Load Balancer', examples=['https']
    )
    proxyprotocol: bool = Field(
        ..., description='Is Proxyprotocol enabled or not', examples=[False]
    )


class Action36(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsUpdateServicePostResponse(BaseModel):
    action: Action36 = Field(..., title='Action')


class Action37(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status55 = Field(..., description='Status of the Action')


class LoadBalancersIdActionsActionIdGetResponse(BaseModel):
    action: Action37 = Field(..., title='Action')


class Type44(Enum):
    open_connections = 'open_connections'
    connections_per_second = 'connections_per_second'
    requests_per_second = 'requests_per_second'
    bandwidth = 'bandwidth'


class TimeSeries(BaseModel):
    values: List[List[Union[float, str]]] = Field(
        ..., description='Metrics Timestamps with values'
    )


class Metrics(BaseModel):
    end: str = Field(
        ...,
        description='End of period of metrics reported (in ISO-8601 format)',
        examples=['2017-01-01T23:00:00+00:00'],
    )
    start: str = Field(
        ...,
        description='Start of period of metrics reported (in ISO-8601 format)',
        examples=['2017-01-01T00:00:00+00:00'],
    )
    step: float = Field(
        ..., description='Resolution of results in seconds.', examples=[60]
    )
    time_series: Dict[str, TimeSeries] = Field(
        ...,
        description='Hash with timeseries information, containing the name of timeseries as key',
        examples=[
            {
                'name_of_timeseries': {
                    'values': [[1435781470.622, '42'], [1435781471.622, '43']]
                }
            }
        ],
    )


class LoadBalancersIdMetricsGetResponse(BaseModel):
    metrics: Metrics


class LocationsGetResponse(BaseModel):
    locations: List[Location]


class LocationsIdGetResponse(BaseModel):
    location: Location


class Meta14(BaseModel):
    pagination: Pagination


class Protection11(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Network from being deleted',
        examples=[False],
    )


class Route(BaseModel):
    destination: str = Field(
        ...,
        description='Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.',
        examples=['10.100.1.0/24'],
    )
    gateway: str = Field(
        ...,
        description='Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.',
        examples=['10.0.1.1'],
    )


class Type46(Enum):
    cloud = 'cloud'
    server = 'server'
    vswitch = 'vswitch'


class Subnet(BaseModel):
    gateway: str = Field(
        ...,
        description='Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.',
        examples=['10.0.0.1'],
    )
    ip_range: Optional[str] = Field(
        None,
        description='Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.',
        examples=['10.0.1.0/24'],
    )
    network_zone: str = Field(
        ...,
        description='Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
        examples=['eu-central'],
    )
    type: Type46 = Field(..., description='Type of Subnetwork')


class Network(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Network was created (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    id: int = Field(..., description='ID of the Network', examples=[4711])
    ip_range: str = Field(
        ..., description='IPv4 prefix of the whole Network', examples=['10.0.0.0/16']
    )
    labels: Dict[str, Any] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = Field(
        None,
        description='Array of IDs of Load Balancers attached to this Network',
        examples=[[42]],
    )
    name: str = Field(..., description='Name of the Network', examples=['mynet'])
    protection: Protection11 = Field(
        ..., description='Protection configuration for the Network'
    )
    routes: List[Route] = Field(..., description='Array of routes set in this Network')
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers attached to this Network',
        examples=[[42]],
    )
    subnets: List[Subnet] = Field(
        ..., description='Array subnets allocated in this Network'
    )


class NetworksGetResponse(BaseModel):
    meta: Optional[Meta14] = None
    networks: List[Network]


class Subnet1(BaseModel):
    ip_range: Optional[str] = Field(
        None,
        description='Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.',
        examples=['10.0.1.0/24'],
    )
    network_zone: str = Field(
        ...,
        description='Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
        examples=['eu-central'],
    )
    type: Type46 = Field(..., description='Type of Subnetwork')


class NetworksPostRequest(BaseModel):
    ip_range: str = Field(
        ...,
        description='IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.',
        examples=['10.0.0.0/16'],
    )
    labels: Optional[Labels] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(..., description='Name of the network', examples=['mynet'])
    routes: Optional[List[Route]] = Field(
        None,
        description='Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1.',
    )
    subnets: Optional[List[Subnet1]] = Field(
        None, description='Array of subnets allocated.'
    )


class Subnet2(BaseModel):
    gateway: str = Field(
        ...,
        description='Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.',
        examples=['10.0.0.1'],
    )
    ip_range: Optional[str] = Field(
        None,
        description='Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.',
        examples=['10.0.1.0/24'],
    )
    network_zone: str = Field(
        ...,
        description='Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
        examples=['eu-central'],
    )
    type: Type46 = Field(..., description='Type of Subnetwork')


class Network1(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Network was created (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    id: int = Field(..., description='ID of the Network', examples=[4711])
    ip_range: str = Field(
        ..., description='IPv4 prefix of the whole Network', examples=['10.0.0.0/16']
    )
    labels: Dict[str, Any] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = Field(
        None,
        description='Array of IDs of Load Balancers attached to this Network',
        examples=[[42]],
    )
    name: str = Field(..., description='Name of the Network', examples=['mynet'])
    protection: Protection11 = Field(
        ..., description='Protection configuration for the Network'
    )
    routes: List[Route] = Field(..., description='Array of routes set in this Network')
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers attached to this Network',
        examples=[[42]],
    )
    subnets: List[Subnet2] = Field(
        ..., description='Array subnets allocated in this Network'
    )


class NetworksPostResponse(BaseModel):
    network: Optional[Network1] = None


class Subnet3(BaseModel):
    gateway: str = Field(
        ...,
        description='Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.',
        examples=['10.0.0.1'],
    )
    ip_range: Optional[str] = Field(
        None,
        description='Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.',
        examples=['10.0.1.0/24'],
    )
    network_zone: str = Field(
        ...,
        description='Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
        examples=['eu-central'],
    )
    type: Type46 = Field(..., description='Type of Subnetwork')


class Network2(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Network was created (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    id: int = Field(..., description='ID of the Network', examples=[4711])
    ip_range: str = Field(
        ..., description='IPv4 prefix of the whole Network', examples=['10.0.0.0/16']
    )
    labels: Dict[str, Any] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = Field(
        None,
        description='Array of IDs of Load Balancers attached to this Network',
        examples=[[42]],
    )
    name: str = Field(..., description='Name of the Network', examples=['mynet'])
    protection: Protection11 = Field(
        ..., description='Protection configuration for the Network'
    )
    routes: List[Route] = Field(..., description='Array of routes set in this Network')
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers attached to this Network',
        examples=[[42]],
    )
    subnets: List[Subnet3] = Field(
        ..., description='Array subnets allocated in this Network'
    )


class NetworksIdGetResponse(BaseModel):
    network: Optional[Network2] = None


class Labels2(BaseModel):
    labelkey: Optional[str] = Field(None, examples=['value'])


class NetworksIdPutRequest(BaseModel):
    labels: Optional[Labels2] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: Optional[str] = Field(
        None, description='New network name', examples=['new-name']
    )


class Subnet4(BaseModel):
    gateway: str = Field(
        ...,
        description='Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.',
        examples=['10.0.0.1'],
    )
    ip_range: Optional[str] = Field(
        None,
        description='Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.',
        examples=['10.0.1.0/24'],
    )
    network_zone: str = Field(
        ...,
        description='Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
        examples=['eu-central'],
    )
    type: Type46 = Field(..., description='Type of Subnetwork')


class Network3(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Network was created (in ISO-8601 format)',
        examples=['2016-01-30T23:50:00+00:00'],
    )
    id: int = Field(..., description='ID of the Network', examples=[4711])
    ip_range: str = Field(
        ..., description='IPv4 prefix of the whole Network', examples=['10.0.0.0/16']
    )
    labels: Dict[str, Any] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = Field(
        None,
        description='Array of IDs of Load Balancers attached to this Network',
        examples=[[42]],
    )
    name: str = Field(..., description='Name of the Network', examples=['mynet'])
    protection: Protection11 = Field(
        ..., description='Protection configuration for the Network'
    )
    routes: List[Route] = Field(..., description='Array of routes set in this Network')
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers attached to this Network',
        examples=[[42]],
    )
    subnets: List[Subnet4] = Field(
        ..., description='Array subnets allocated in this Network'
    )


class NetworksIdPutResponse(BaseModel):
    network: Optional[Network3] = None


class Status69(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status70(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action38(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status70 = Field(..., description='Status of the Action')


class Meta15(BaseModel):
    pagination: Pagination


class NetworksIdActionsGetResponse(BaseModel):
    actions: List[Action38]
    meta: Optional[Meta15] = None


class Status71(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class NetworksIdActionsAddRoutePostRequest(BaseModel):
    destination: str = Field(
        ...,
        description='Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.',
        examples=['10.100.1.0/24'],
    )
    gateway: str = Field(
        ...,
        description='Gateway for the route. Cannot be the first IP of the networks ip_range, an IP behind a vSwitch or 172.31.1.1, as this IP is being used as a gateway for the public network interface of Servers.',
        examples=['10.0.1.1'],
    )


class Status72(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action39(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsAddRoutePostResponse(BaseModel):
    action: Action39 = Field(..., title='Action')


class NetworksIdActionsAddSubnetPostRequest(BaseModel):
    ip_range: Optional[str] = Field(
        None,
        description='Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. If the Subnet is of type vSwitch, it also can not overlap with any gateway in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.',
        examples=['10.0.1.0/24'],
    )
    network_zone: str = Field(
        ...,
        description='Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
        examples=['eu-central'],
    )
    type: Type46 = Field(..., description='Type of Subnetwork')
    vswitch_id: Optional[int] = Field(
        None,
        description='ID of the robot vSwitch. Must be supplied if the subnet is of type vswitch.',
        examples=[1000],
    )


class Action40(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsAddSubnetPostResponse(BaseModel):
    action: Action40 = Field(..., title='Action')


class NetworksIdActionsChangeIpRangePostRequest(BaseModel):
    ip_range: str = Field(
        ...,
        description='The new prefix for the whole Network',
        examples=['10.0.0.0/12'],
    )


class Action41(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsChangeIpRangePostResponse(BaseModel):
    action: Action41 = Field(..., title='Action')


class NetworksIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the Network from being deleted',
        examples=[True],
    )


class Action42(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action42 = Field(..., title='Action')


class NetworksIdActionsDeleteRoutePostRequest(BaseModel):
    destination: str = Field(
        ...,
        description='Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.',
        examples=['10.100.1.0/24'],
    )
    gateway: str = Field(
        ...,
        description='Gateway for the route. Cannot be the first IP of the networks ip_range, an IP behind a vSwitch or 172.31.1.1, as this IP is being used as a gateway for the public network interface of Servers.',
        examples=['10.0.1.1'],
    )


class Action43(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsDeleteRoutePostResponse(BaseModel):
    action: Action43 = Field(..., title='Action')


class NetworksIdActionsDeleteSubnetPostRequest(BaseModel):
    ip_range: str = Field(
        ..., description='IP range of subnet to delete', examples=['10.0.1.0/24']
    )


class Action44(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsDeleteSubnetPostResponse(BaseModel):
    action: Action44 = Field(..., title='Action')


class Action45(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class NetworksIdActionsActionIdGetResponse(BaseModel):
    action: Action45 = Field(..., title='Action')


class Sort24(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Type52(Enum):
    spread = 'spread'


class Meta16(BaseModel):
    pagination: Pagination


class PlacementGroup(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type52 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class PlacementGroupsGetResponse(BaseModel):
    meta: Optional[Meta16] = None
    placement_groups: List[PlacementGroup]


class PlacementGroupsPostRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ..., description='Name of the PlacementGroup', examples=['my Placement Group']
    )
    type: Type52 = Field(
        ..., description='Define the Placement Group Type.', examples=['spread']
    )


class Action46(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class PlacementGroup1(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type52 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class PlacementGroupsPostResponse(BaseModel):
    action: Optional[Action46] = Field(None, title='NullableAction')
    placement_group: PlacementGroup1 = Field(..., title='PlacementGroup')


class PlacementGroup2(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type52 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class PlacementGroupsIdGetResponse(BaseModel):
    placement_group: PlacementGroup2 = Field(..., title='PlacementGroup')


class PlacementGroupsIdPutRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New PlacementGroup name', examples=['my Placement Group']
    )


class PlacementGroup3(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type52 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class PlacementGroupsIdPutResponse(BaseModel):
    placement_group: PlacementGroup3 = Field(..., title='PlacementGroup')


class FloatingIp4(BaseModel):
    price_monthly: PriceMonthly


class Price6(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Floating IP type in this Location'
    )


class Type59(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class FloatingIp5(BaseModel):
    prices: List[Price6] = Field(..., description='Floating IP type costs per Location')
    type: Type59 = Field(
        ..., description='The type of the Floating IP', examples=['ipv4']
    )


class PricePerGbMonth(BaseModel):
    gross: str = Field(
        ..., description='Price with VAT added', examples=['1.1900000000000000']
    )
    net: str = Field(..., description='Price without VAT', examples=['1.0000000000'])


class Image3(BaseModel):
    price_per_gb_month: PricePerGbMonth


class Price7(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Load Balancer type in this network zone'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Load Balancer type in this network zone'
    )


class LoadBalancerType6(BaseModel):
    id: float = Field(
        ..., description='ID of the Load Balancer type the price is for', examples=[1]
    )
    name: str = Field(
        ...,
        description='Name of the Load Balancer type the price is for',
        examples=['lb11'],
    )
    prices: List[Price7] = Field(
        ..., description='Load Balancer type costs per Location'
    )


class Price8(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Primary IP type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Primary IP type in this Location'
    )


class PrimaryIp(BaseModel):
    prices: List[Price8] = Field(..., description='Primary IP type costs per Location')
    type: Type59 = Field(
        ..., description='The type of the Primary IP', examples=['ipv4']
    )


class ServerBackup(BaseModel):
    percentage: str = Field(
        ...,
        description='Percentage by how much the base price will increase',
        examples=['20.0000000000'],
    )


class Price9(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class ServerType(BaseModel):
    id: float = Field(
        ..., description='ID of the Server type the price is for', examples=[4]
    )
    name: str = Field(
        ..., description='Name of the Server type the price is for', examples=['cx11']
    )
    prices: List[Price9] = Field(..., description='Server type costs per Location')


class PricePerTb(BaseModel):
    gross: str = Field(
        ..., description='Price with VAT added', examples=['1.1900000000000000']
    )
    net: str = Field(..., description='Price without VAT', examples=['1.0000000000'])


class Traffic(BaseModel):
    price_per_tb: PricePerTb


class Volume(BaseModel):
    price_per_gb_month: PricePerGbMonth


class Pricing(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    currency: str = Field(
        ...,
        description='Currency the returned prices are expressed in, coded according to ISO 4217',
        examples=['EUR'],
    )
    floating_ip: FloatingIp4 = Field(
        ..., description='The cost of one Floating IP per month'
    )
    floating_ips: List[FloatingIp5] = Field(
        ..., description='Costs of Floating IPs types per Location and type'
    )
    image: Image3 = Field(..., description='The cost of Image per GB/month')
    load_balancer_types: List[LoadBalancerType6] = Field(
        ..., description='Costs of Load Balancer types per Location and type'
    )
    primary_ips: List[PrimaryIp] = Field(
        ..., description='Costs of Primary IPs types per Location'
    )
    server_backup: ServerBackup = Field(
        ..., description='Will increase base Server costs by specific percentage'
    )
    server_types: List[ServerType] = Field(
        ..., description='Costs of Server types per Location and type'
    )
    traffic: Traffic = Field(..., description='The cost of additional traffic per TB')
    vat_rate: str = Field(
        ...,
        description='The VAT rate used for calculating prices with VAT',
        examples=['19.000000'],
    )
    volume: Volume = Field(..., description='The cost of Volume per GB/month')


class PricingGetResponse(BaseModel):
    pricing: Pricing


class Sort26(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Meta17(BaseModel):
    pagination: Pagination


class AssigneeType(Enum):
    server = 'server'


class Datacenter2(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class DnsPtrItem4(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='DNS pointer for the specific IP address',
        examples=['server.example.com'],
    )
    ip: str = Field(
        ..., description='Single IPv4 or IPv6 address', examples=['131.232.99.1']
    )


class Protection15(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Resource from being deleted',
        examples=[False],
    )


class PrimaryIp1(BaseModel):
    assignee_id: int = Field(
        ...,
        description='ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
        examples=[17],
    )
    assignee_type: AssigneeType = Field(
        ..., description='Resource type the Primary IP can be assigned to'
    )
    auto_delete: bool = Field(
        ...,
        description='Delete this Primary IP when the resource it is assigned to is deleted',
        examples=[True],
    )
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter2 = Field(
        ..., description='Datacenter this Primary IP is located at'
    )
    dns_ptr: List[DnsPtrItem4] = Field(..., description='Array of reverse DNS entries')
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection15 = Field(
        ..., description='Protection configuration for the Resource'
    )
    type: Type59 = Field(..., description='Type of the Primary IP')


class PrimaryIpsGetResponse(BaseModel):
    meta: Optional[Meta17] = None
    primary_ips: List[PrimaryIp1]


class PrimaryIpsPostRequest(BaseModel):
    assignee_id: Optional[int] = Field(
        None,
        description='ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned.',
        examples=[17],
    )
    assignee_type: AssigneeType = Field(
        ...,
        description='Resource type the Primary IP can be assigned to',
        examples=['server'],
    )
    auto_delete: Optional[bool] = Field(
        None,
        description='Delete the Primary IP when the Server it is assigned to is deleted. If omitted defaults to `false`.',
        examples=[False],
    )
    datacenter: Optional[str] = Field(
        None,
        description='ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed.',
        examples=['fsn1-dc8'],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: str = Field(..., examples=['my-ip'])
    type: Type59 = Field(..., description='Primary IP type')


class Action47(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class Datacenter3(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class PrimaryIp2(BaseModel):
    assignee_id: int = Field(
        ...,
        description='ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
        examples=[17],
    )
    assignee_type: AssigneeType = Field(
        ..., description='Resource type the Primary IP can be assigned to'
    )
    auto_delete: bool = Field(
        ...,
        description='Delete this Primary IP when the resource it is assigned to is deleted',
        examples=[True],
    )
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter3 = Field(
        ..., description='Datacenter this Primary IP is located at'
    )
    dns_ptr: List[DnsPtrItem4] = Field(..., description='Array of reverse DNS entries')
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection15 = Field(
        ..., description='Protection configuration for the Resource'
    )
    type: Type59 = Field(..., description='Type of the Primary IP')


class PrimaryIpsPostResponse(BaseModel):
    action: Optional[Action47] = Field(None, title='Action')
    primary_ip: PrimaryIp2 = Field(..., title='PrimaryIP')


class Datacenter4(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class PrimaryIp3(BaseModel):
    assignee_id: int = Field(
        ...,
        description='ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
        examples=[17],
    )
    assignee_type: AssigneeType = Field(
        ..., description='Resource type the Primary IP can be assigned to'
    )
    auto_delete: bool = Field(
        ...,
        description='Delete this Primary IP when the resource it is assigned to is deleted',
        examples=[True],
    )
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter4 = Field(
        ..., description='Datacenter this Primary IP is located at'
    )
    dns_ptr: List[DnsPtrItem4] = Field(..., description='Array of reverse DNS entries')
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection15 = Field(
        ..., description='Protection configuration for the Resource'
    )
    type: Type59 = Field(..., description='Type of the Primary IP')


class PrimaryIpsIdGetResponse(BaseModel):
    primary_ip: PrimaryIp3 = Field(..., title='PrimaryIP')


class PrimaryIpsIdPutRequest(BaseModel):
    auto_delete: Optional[bool] = Field(
        None,
        description='Delete this Primary IP when the resource it is assigned to is deleted',
        examples=[True],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New unique name to set', examples=['my-ip']
    )


class Datacenter5(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class PrimaryIp4(BaseModel):
    assignee_id: int = Field(
        ...,
        description='ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
        examples=[17],
    )
    assignee_type: AssigneeType = Field(
        ..., description='Resource type the Primary IP can be assigned to'
    )
    auto_delete: bool = Field(
        ...,
        description='Delete this Primary IP when the resource it is assigned to is deleted',
        examples=[True],
    )
    blocked: bool = Field(
        ..., description='Whether the IP is blocked', examples=[False]
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter5 = Field(
        ..., description='Datacenter this Primary IP is located at'
    )
    dns_ptr: List[DnsPtrItem4] = Field(..., description='Array of reverse DNS entries')
    id: int = Field(..., description='ID of the Resource', examples=[42])
    ip: str = Field(..., description='IP address', examples=['131.232.99.1'])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection15 = Field(
        ..., description='Protection configuration for the Resource'
    )
    type: Type59 = Field(..., description='Type of the Primary IP')


class PrimaryIpsIdPutResponse(BaseModel):
    primary_ip: PrimaryIp4 = Field(..., title='PrimaryIP')


class PrimaryIpsIdActionsAssignPostRequest(BaseModel):
    assignee_id: int = Field(
        ..., description='ID of a resource of type `assignee_type`', examples=[4711]
    )
    assignee_type: AssigneeType = Field(
        ...,
        description='Type of resource assigning the Primary IP to',
        examples=['server'],
    )


class Action48(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class PrimaryIpsIdActionsAssignPostResponse(BaseModel):
    action: Action48 = Field(..., title='Action')


class PrimaryIpsIdActionsChangeDnsPtrPostRequest(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='Hostname to set as a reverse DNS PTR entry, will reset to original default value if `null`',
        examples=['server02.example.com'],
    )
    ip: str = Field(
        ...,
        description='IP address for which to set the reverse DNS entry',
        examples=['1.2.3.4'],
    )


class Action49(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class PrimaryIpsIdActionsChangeDnsPtrPostResponse(BaseModel):
    action: Action49 = Field(..., title='Action')


class PrimaryIpsIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the Primary IP from being deleted',
        examples=[True],
    )


class Action50(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class PrimaryIpsIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action50 = Field(..., title='Action')


class Action51(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status72 = Field(..., description='Status of the Action')


class PrimaryIpsIdActionsUnassignPostResponse(BaseModel):
    action: Action51 = Field(..., title='Action')


class CpuType(Enum):
    shared = 'shared'
    dedicated = 'dedicated'


class Price10(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class StorageType(Enum):
    local = 'local'
    network = 'network'


class ServerType1(BaseModel):
    cores: float = Field(
        ...,
        description='Number of cpu cores a Server of this type will have',
        examples=[1],
    )
    cpu_type: CpuType = Field(..., description='Type of cpu')
    deprecated: bool = Field(
        ..., description='True if Server type is deprecated', examples=[False]
    )
    description: str = Field(
        ..., description='Description of the Server type', examples=['CX11']
    )
    disk: float = Field(
        ...,
        description='Disk size a Server of this type will have in GB',
        examples=[24],
    )
    id: float = Field(..., description='ID of the Server type', examples=[1])
    memory: float = Field(
        ..., description='Memory a Server of this type will have in GB', examples=[1]
    )
    name: str = Field(
        ..., description='Unique identifier of the Server type', examples=['cx11']
    )
    prices: List[Price10] = Field(..., description='Prices in different Locations')
    storage_type: StorageType = Field(
        ...,
        description='Type of Server boot drive. Local has higher speed. Network has better availability.',
    )


class ServerTypesGetResponse(BaseModel):
    server_types: List[ServerType1]


class Price11(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class ServerType2(BaseModel):
    cores: float = Field(
        ...,
        description='Number of cpu cores a Server of this type will have',
        examples=[1],
    )
    cpu_type: CpuType = Field(..., description='Type of cpu')
    deprecated: bool = Field(
        ..., description='True if Server type is deprecated', examples=[False]
    )
    description: str = Field(
        ..., description='Description of the Server type', examples=['CX11']
    )
    disk: float = Field(
        ...,
        description='Disk size a Server of this type will have in GB',
        examples=[24],
    )
    id: float = Field(..., description='ID of the Server type', examples=[1])
    memory: float = Field(
        ..., description='Memory a Server of this type will have in GB', examples=[1]
    )
    name: str = Field(
        ..., description='Unique identifier of the Server type', examples=['cx11']
    )
    prices: List[Price11] = Field(..., description='Prices in different Locations')
    storage_type: StorageType = Field(
        ...,
        description='Type of Server boot drive. Local has higher speed. Network has better availability.',
    )


class ServerTypesIdGetResponse(BaseModel):
    server_type: ServerType2


class Sort28(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Status85(Enum):
    initializing = 'initializing'
    starting = 'starting'
    running = 'running'
    stopping = 'stopping'
    off = 'off'
    deleting = 'deleting'
    rebuilding = 'rebuilding'
    migrating = 'migrating'
    unknown = 'unknown'


class Meta18(BaseModel):
    pagination: Pagination


class Datacenter6(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class Status86(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type66(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image4(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection15 = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status86 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type66 = Field(..., description='Type of the Image', examples=['snapshot'])


class Type67(Enum):
    public = 'public'
    private = 'private'


class Iso2(BaseModel):
    deprecated: str = Field(
        ...,
        description='ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the ISO', examples=['FreeBSD 11.0 x64']
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    name: str = Field(
        ...,
        description='Unique identifier of the ISO. Only set for public ISOs',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )
    type: Type67 = Field(..., description='Type of the ISO')


class Type68(Enum):
    spread = 'spread'


class PlacementGroup4(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type68 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class PrivateNetItem4(BaseModel):
    alias_ips: Optional[List[str]] = None
    ip: Optional[str] = Field(None, examples=['10.0.0.2'])
    mac_address: Optional[str] = Field(None, examples=['86:00:ff:2a:7d:e1'])
    network: Optional[int] = Field(None, examples=[4711])


class Protection20(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Server from being deleted',
        examples=[False],
    )
    rebuild: bool = Field(
        ...,
        description='If true, prevents the Server from being rebuilt',
        examples=[False],
    )


class Status87(Enum):
    applied = 'applied'
    pending = 'pending'


class Firewall4(BaseModel):
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    status: Optional[Status87] = Field(
        None, description='Status of the Firewall on the Server', examples=['applied']
    )


class Ipv44(BaseModel):
    blocked: bool = Field(
        ..., description='If the IP is blocked by our anti abuse dept', examples=[False]
    )
    dns_ptr: str = Field(
        ...,
        description='Reverse DNS PTR entry for the IPv4 addresses of this Server',
        examples=['server01.example.com'],
    )
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    ip: str = Field(
        ..., description='IP address (v4) of this Server', examples=['1.2.3.4']
    )


class DnsPtrItem8(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='DNS pointer for the specific IP address',
        examples=['server.example.com'],
    )
    ip: str = Field(
        ...,
        description='Single IPv6 address of this Server for which the reverse DNS entry has been set up',
        examples=['2001:db8::1'],
    )


class Ipv64(BaseModel):
    blocked: bool = Field(
        ..., description='If the IP is blocked by our anti abuse dept', examples=[False]
    )
    dns_ptr: List[DnsPtrItem8] = Field(
        ...,
        description='Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default',
    )
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    ip: str = Field(
        ..., description='IP address (v6) of this Server', examples=['2001:db8::/64']
    )


class PublicNet4(BaseModel):
    firewalls: Optional[List[Firewall4]] = Field(
        None,
        description='Firewalls applied to the public network interface of this Server',
    )
    floating_ips: List[int] = Field(
        ..., description='IDs of Floating IPs assigned to this Server', examples=[[478]]
    )
    ipv4: Ipv44 = Field(
        ..., description='IP address (v4) and its reverse DNS entry of this Server'
    )
    ipv6: Ipv64 = Field(
        ...,
        description='IPv6 network assigned to this Server and its reverse DNS entry',
    )


class Price12(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class ServerType3(BaseModel):
    cores: float = Field(
        ...,
        description='Number of cpu cores a Server of this type will have',
        examples=[1],
    )
    cpu_type: CpuType = Field(..., description='Type of cpu')
    deprecated: bool = Field(
        ..., description='True if Server type is deprecated', examples=[False]
    )
    description: str = Field(
        ..., description='Description of the Server type', examples=['CX11']
    )
    disk: float = Field(
        ...,
        description='Disk size a Server of this type will have in GB',
        examples=[25],
    )
    id: int = Field(..., description='ID of the Server type', examples=[1])
    memory: float = Field(
        ..., description='Memory a Server of this type will have in GB', examples=[1]
    )
    name: str = Field(
        ..., description='Unique identifier of the Server type', examples=['cx11']
    )
    prices: List[Price12] = Field(..., description='Prices in different Locations')
    storage_type: StorageType = Field(
        ...,
        description='Type of Server boot drive. Local has higher speed. Network has better availability.',
    )


class Status88(Enum):
    running = 'running'
    initializing = 'initializing'
    starting = 'starting'
    stopping = 'stopping'
    off = 'off'
    deleting = 'deleting'
    migrating = 'migrating'
    rebuilding = 'rebuilding'
    unknown = 'unknown'


class Server23(BaseModel):
    backup_window: str = Field(
        ...,
        description='Time window (UTC) in which the backup will run, or null if the backups are not enabled',
        examples=['22-02'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter6 = Field(
        ..., description='Datacenter this Resource is located at'
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image: Image4
    included_traffic: float = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[654321],
    )
    ingoing_traffic: float = Field(
        ...,
        description='Inbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    iso: Iso2 = Field(
        ...,
        description='ISO Image that is attached to this Server. Null if no ISO is attached.',
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = None
    locked: bool = Field(
        ...,
        description='True if Server has been locked and is not available to user',
        examples=[False],
    )
    name: str = Field(
        ...,
        description='Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)',
        examples=['my-resource'],
    )
    outgoing_traffic: float = Field(
        ...,
        description='Outbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    placement_group: Optional[PlacementGroup4] = Field(
        None, title='PlacementGroupNullable'
    )
    primary_disk_size: float = Field(
        ..., description='Size of the primary Disk', examples=[50]
    )
    private_net: List[PrivateNetItem4] = Field(
        ..., description='Private networks information'
    )
    protection: Protection20 = Field(
        ..., description='Protection configuration for the Server'
    )
    public_net: PublicNet4 = Field(
        ...,
        description="Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`",
    )
    rescue_enabled: bool = Field(
        ...,
        description='True if rescue mode is enabled. Server will then boot into rescue system on next reboot',
        examples=[False],
    )
    server_type: ServerType3 = Field(
        ...,
        description='Type of Server - determines how much ram, disk and cpu a Server has',
    )
    status: Status88 = Field(..., description='Status of the Server')
    volumes: Optional[List[int]] = Field(
        None, description='IDs of Volumes assigned to this Server'
    )


class ServersGetResponse(BaseModel):
    meta: Optional[Meta18] = None
    servers: List[Server23]


class Status89(Enum):
    initializing = 'initializing'
    starting = 'starting'
    running = 'running'
    stopping = 'stopping'
    off = 'off'
    deleting = 'deleting'
    rebuilding = 'rebuilding'
    migrating = 'migrating'
    unknown = 'unknown'


class Firewall5(BaseModel):
    firewall: Optional[int] = Field(None, description='ID of the Firewall')


class PublicNet5(BaseModel):
    enable_ipv4: Optional[bool] = Field(
        None,
        description='Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached. Defaults to true.',
    )
    enable_ipv6: Optional[bool] = Field(
        None,
        description='Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached. Defaults to true.',
    )
    ipv4: Optional[int] = Field(
        None,
        description='ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.',
    )
    ipv6: Optional[int] = Field(
        None,
        description='ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.',
    )


class ServersPostRequest(BaseModel):
    automount: Optional[bool] = Field(
        None, description='Auto-mount Volumes after attach', examples=[False]
    )
    datacenter: Optional[str] = Field(
        None,
        description='ID or name of Datacenter to create Server in (must not be used together with location)',
        examples=['nbg1-dc3'],
    )
    firewalls: Optional[List[Firewall5]] = Field(
        None,
        description="Firewalls which should be applied on the Server's public network interface at creation time",
        examples=[[{'firewall': 38}]],
    )
    image: str = Field(
        ...,
        description='ID or name of the Image the Server is created from',
        examples=['ubuntu-20.04'],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    location: Optional[str] = Field(
        None,
        description='ID or name of Location to create Server in (must not be used together with datacenter)',
        examples=['nbg1'],
    )
    name: str = Field(
        ...,
        description='Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)',
        examples=['my-server'],
    )
    networks: Optional[List[int]] = Field(
        None,
        description='Network IDs which should be attached to the Server private network interface at the creation time',
        examples=[[456]],
    )
    placement_group: Optional[int] = Field(
        None,
        description='ID of the Placement Group the server should be in',
        examples=[1],
    )
    public_net: Optional[PublicNet5] = Field(None, description='Public Network options')
    server_type: str = Field(
        ...,
        description='ID or name of the Server type this Server should be created with',
        examples=['cx11'],
    )
    ssh_keys: Optional[List[str]] = Field(
        None,
        description='SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time',
        examples=[['my-ssh-key']],
    )
    start_after_create: Optional[bool] = Field(
        None,
        description='Start Server right after creation. Defaults to true.',
        examples=[True],
    )
    user_data: Optional[str] = Field(
        None,
        description='Cloud-Init user data to use during Server creation. This field is limited to 32KiB.',
        examples=['#cloud-config\nruncmd:\n- [touch, /root/cloud-init-worked]\n'],
    )
    volumes: Optional[List[int]] = Field(
        None,
        description='Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.',
        examples=[[123]],
    )


class Status90(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action52(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status90 = Field(..., description='Status of the Action')


class NextAction(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status90 = Field(..., description='Status of the Action')


class Datacenter7(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class Protection21(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Resource from being deleted',
        examples=[False],
    )


class Status92(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type69(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image5(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection21 = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status92 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type69 = Field(..., description='Type of the Image', examples=['snapshot'])


class Type70(Enum):
    public = 'public'
    private = 'private'


class Iso3(BaseModel):
    deprecated: str = Field(
        ...,
        description='ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the ISO', examples=['FreeBSD 11.0 x64']
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    name: str = Field(
        ...,
        description='Unique identifier of the ISO. Only set for public ISOs',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )
    type: Type70 = Field(..., description='Type of the ISO')


class Type71(Enum):
    spread = 'spread'


class PlacementGroup5(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type71 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class Protection22(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Server from being deleted',
        examples=[False],
    )
    rebuild: bool = Field(
        ...,
        description='If true, prevents the Server from being rebuilt',
        examples=[False],
    )


class Status93(Enum):
    applied = 'applied'
    pending = 'pending'


class Firewall6(BaseModel):
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    status: Optional[Status93] = Field(
        None, description='Status of the Firewall on the Server', examples=['applied']
    )


class Ipv65(BaseModel):
    blocked: bool = Field(
        ..., description='If the IP is blocked by our anti abuse dept', examples=[False]
    )
    dns_ptr: List[DnsPtrItem8] = Field(
        ...,
        description='Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default',
    )
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    ip: str = Field(
        ..., description='IP address (v6) of this Server', examples=['2001:db8::/64']
    )


class PublicNet6(BaseModel):
    firewalls: Optional[List[Firewall6]] = Field(
        None,
        description='Firewalls applied to the public network interface of this Server',
    )
    floating_ips: List[int] = Field(
        ..., description='IDs of Floating IPs assigned to this Server', examples=[[478]]
    )
    ipv4: Ipv44 = Field(
        ..., description='IP address (v4) and its reverse DNS entry of this Server'
    )
    ipv6: Ipv65 = Field(
        ...,
        description='IPv6 network assigned to this Server and its reverse DNS entry',
    )


class Price13(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class ServerType4(BaseModel):
    cores: float = Field(
        ...,
        description='Number of cpu cores a Server of this type will have',
        examples=[1],
    )
    cpu_type: CpuType = Field(..., description='Type of cpu')
    deprecated: bool = Field(
        ..., description='True if Server type is deprecated', examples=[False]
    )
    description: str = Field(
        ..., description='Description of the Server type', examples=['CX11']
    )
    disk: float = Field(
        ...,
        description='Disk size a Server of this type will have in GB',
        examples=[25],
    )
    id: int = Field(..., description='ID of the Server type', examples=[1])
    memory: float = Field(
        ..., description='Memory a Server of this type will have in GB', examples=[1]
    )
    name: str = Field(
        ..., description='Unique identifier of the Server type', examples=['cx11']
    )
    prices: List[Price13] = Field(..., description='Prices in different Locations')
    storage_type: StorageType = Field(
        ...,
        description='Type of Server boot drive. Local has higher speed. Network has better availability.',
    )


class Status94(Enum):
    running = 'running'
    initializing = 'initializing'
    starting = 'starting'
    stopping = 'stopping'
    off = 'off'
    deleting = 'deleting'
    migrating = 'migrating'
    rebuilding = 'rebuilding'
    unknown = 'unknown'


class Server24(BaseModel):
    backup_window: str = Field(
        ...,
        description='Time window (UTC) in which the backup will run, or null if the backups are not enabled',
        examples=['22-02'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter7 = Field(
        ..., description='Datacenter this Resource is located at'
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image: Image5
    included_traffic: float = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[654321],
    )
    ingoing_traffic: float = Field(
        ...,
        description='Inbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    iso: Iso3 = Field(
        ...,
        description='ISO Image that is attached to this Server. Null if no ISO is attached.',
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = None
    locked: bool = Field(
        ...,
        description='True if Server has been locked and is not available to user',
        examples=[False],
    )
    name: str = Field(
        ...,
        description='Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)',
        examples=['my-resource'],
    )
    outgoing_traffic: float = Field(
        ...,
        description='Outbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    placement_group: Optional[PlacementGroup5] = Field(
        None, title='PlacementGroupNullable'
    )
    primary_disk_size: float = Field(
        ..., description='Size of the primary Disk', examples=[50]
    )
    private_net: List[PrivateNetItem4] = Field(
        ..., description='Private networks information'
    )
    protection: Protection22 = Field(
        ..., description='Protection configuration for the Server'
    )
    public_net: PublicNet6 = Field(
        ...,
        description="Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`",
    )
    rescue_enabled: bool = Field(
        ...,
        description='True if rescue mode is enabled. Server will then boot into rescue system on next reboot',
        examples=[False],
    )
    server_type: ServerType4 = Field(
        ...,
        description='Type of Server - determines how much ram, disk and cpu a Server has',
    )
    status: Status94 = Field(..., description='Status of the Server')
    volumes: Optional[List[int]] = Field(
        None, description='IDs of Volumes assigned to this Server'
    )


class ServersPostResponse(BaseModel):
    action: Action52 = Field(..., title='Action')
    next_actions: List[NextAction]
    root_password: str = Field(
        ...,
        description='Root password when no SSH keys have been specified',
        examples=['YItygq1v3GYjjMomLaKc'],
    )
    server: Server24


class Status95(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action53(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status95 = Field(..., description='Status of the Action')


class ServersIdDeleteResponse(BaseModel):
    action: Optional[Action53] = Field(None, title='Action')


class Datacenter8(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class Protection23(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Resource from being deleted',
        examples=[False],
    )


class Status96(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type72(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image6(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection23 = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status96 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type72 = Field(..., description='Type of the Image', examples=['snapshot'])


class Type73(Enum):
    public = 'public'
    private = 'private'


class Iso4(BaseModel):
    deprecated: str = Field(
        ...,
        description='ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the ISO', examples=['FreeBSD 11.0 x64']
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    name: str = Field(
        ...,
        description='Unique identifier of the ISO. Only set for public ISOs',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )
    type: Type73 = Field(..., description='Type of the ISO')


class Type74(Enum):
    spread = 'spread'


class PlacementGroup6(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type74 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class Protection24(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Server from being deleted',
        examples=[False],
    )
    rebuild: bool = Field(
        ...,
        description='If true, prevents the Server from being rebuilt',
        examples=[False],
    )


class Status97(Enum):
    applied = 'applied'
    pending = 'pending'


class Firewall7(BaseModel):
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    status: Optional[Status97] = Field(
        None, description='Status of the Firewall on the Server', examples=['applied']
    )


class Ipv66(BaseModel):
    blocked: bool = Field(
        ..., description='If the IP is blocked by our anti abuse dept', examples=[False]
    )
    dns_ptr: List[DnsPtrItem8] = Field(
        ...,
        description='Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default',
    )
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    ip: str = Field(
        ..., description='IP address (v6) of this Server', examples=['2001:db8::/64']
    )


class PublicNet7(BaseModel):
    firewalls: Optional[List[Firewall7]] = Field(
        None,
        description='Firewalls applied to the public network interface of this Server',
    )
    floating_ips: List[int] = Field(
        ..., description='IDs of Floating IPs assigned to this Server', examples=[[478]]
    )
    ipv4: Ipv44 = Field(
        ..., description='IP address (v4) and its reverse DNS entry of this Server'
    )
    ipv6: Ipv66 = Field(
        ...,
        description='IPv6 network assigned to this Server and its reverse DNS entry',
    )


class Price14(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class ServerType5(BaseModel):
    cores: float = Field(
        ...,
        description='Number of cpu cores a Server of this type will have',
        examples=[1],
    )
    cpu_type: CpuType = Field(..., description='Type of cpu')
    deprecated: bool = Field(
        ..., description='True if Server type is deprecated', examples=[False]
    )
    description: str = Field(
        ..., description='Description of the Server type', examples=['CX11']
    )
    disk: float = Field(
        ...,
        description='Disk size a Server of this type will have in GB',
        examples=[25],
    )
    id: int = Field(..., description='ID of the Server type', examples=[1])
    memory: float = Field(
        ..., description='Memory a Server of this type will have in GB', examples=[1]
    )
    name: str = Field(
        ..., description='Unique identifier of the Server type', examples=['cx11']
    )
    prices: List[Price14] = Field(..., description='Prices in different Locations')
    storage_type: StorageType = Field(
        ...,
        description='Type of Server boot drive. Local has higher speed. Network has better availability.',
    )


class Status98(Enum):
    running = 'running'
    initializing = 'initializing'
    starting = 'starting'
    stopping = 'stopping'
    off = 'off'
    deleting = 'deleting'
    migrating = 'migrating'
    rebuilding = 'rebuilding'
    unknown = 'unknown'


class Server25(BaseModel):
    backup_window: str = Field(
        ...,
        description='Time window (UTC) in which the backup will run, or null if the backups are not enabled',
        examples=['22-02'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter8 = Field(
        ..., description='Datacenter this Resource is located at'
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image: Image6
    included_traffic: float = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[654321],
    )
    ingoing_traffic: float = Field(
        ...,
        description='Inbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    iso: Iso4 = Field(
        ...,
        description='ISO Image that is attached to this Server. Null if no ISO is attached.',
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = None
    locked: bool = Field(
        ...,
        description='True if Server has been locked and is not available to user',
        examples=[False],
    )
    name: str = Field(
        ...,
        description='Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)',
        examples=['my-resource'],
    )
    outgoing_traffic: float = Field(
        ...,
        description='Outbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    placement_group: Optional[PlacementGroup6] = Field(
        None, title='PlacementGroupNullable'
    )
    primary_disk_size: float = Field(
        ..., description='Size of the primary Disk', examples=[50]
    )
    private_net: List[PrivateNetItem4] = Field(
        ..., description='Private networks information'
    )
    protection: Protection24 = Field(
        ..., description='Protection configuration for the Server'
    )
    public_net: PublicNet7 = Field(
        ...,
        description="Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`",
    )
    rescue_enabled: bool = Field(
        ...,
        description='True if rescue mode is enabled. Server will then boot into rescue system on next reboot',
        examples=[False],
    )
    server_type: ServerType5 = Field(
        ...,
        description='Type of Server - determines how much ram, disk and cpu a Server has',
    )
    status: Status98 = Field(..., description='Status of the Server')
    volumes: Optional[List[int]] = Field(
        None, description='IDs of Volumes assigned to this Server'
    )


class ServersIdGetResponse(BaseModel):
    server: Optional[Server25] = None


class ServersIdPutRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New name to set', examples=['my-server']
    )


class Datacenter9(BaseModel):
    description: str = Field(
        ...,
        description='Description of the Datacenter',
        examples=['Falkenstein DC Park 8'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    location: Location
    name: str = Field(
        ..., description='Unique identifier of the Datacenter', examples=['fsn1-dc8']
    )
    server_types: ServerTypes = Field(
        ..., description='The Server types the Datacenter can handle'
    )


class Protection25(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Resource from being deleted',
        examples=[False],
    )


class Status99(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type75(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image7(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection25 = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status99 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type75 = Field(..., description='Type of the Image', examples=['snapshot'])


class Type76(Enum):
    public = 'public'
    private = 'private'


class Iso5(BaseModel):
    deprecated: str = Field(
        ...,
        description='ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ..., description='Description of the ISO', examples=['FreeBSD 11.0 x64']
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    name: str = Field(
        ...,
        description='Unique identifier of the ISO. Only set for public ISOs',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )
    type: Type76 = Field(..., description='Type of the ISO')


class Type77(Enum):
    spread = 'spread'


class PlacementGroup7(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    servers: List[int] = Field(
        ...,
        description='Array of IDs of Servers that are part of this Placement Group',
        examples=[[42]],
    )
    type: Type77 = Field(
        ..., description='Type of the Placement Group', examples=['spread']
    )


class Protection26(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Server from being deleted',
        examples=[False],
    )
    rebuild: bool = Field(
        ...,
        description='If true, prevents the Server from being rebuilt',
        examples=[False],
    )


class Status100(Enum):
    applied = 'applied'
    pending = 'pending'


class Firewall8(BaseModel):
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    status: Optional[Status100] = Field(
        None, description='Status of the Firewall on the Server', examples=['applied']
    )


class Ipv67(BaseModel):
    blocked: bool = Field(
        ..., description='If the IP is blocked by our anti abuse dept', examples=[False]
    )
    dns_ptr: List[DnsPtrItem8] = Field(
        ...,
        description='Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default',
    )
    id: Optional[int] = Field(None, description='ID of the Resource', examples=[42])
    ip: str = Field(
        ..., description='IP address (v6) of this Server', examples=['2001:db8::/64']
    )


class PublicNet8(BaseModel):
    firewalls: Optional[List[Firewall8]] = Field(
        None,
        description='Firewalls applied to the public network interface of this Server',
    )
    floating_ips: List[int] = Field(
        ..., description='IDs of Floating IPs assigned to this Server', examples=[[478]]
    )
    ipv4: Ipv44 = Field(
        ..., description='IP address (v4) and its reverse DNS entry of this Server'
    )
    ipv6: Ipv67 = Field(
        ...,
        description='IPv6 network assigned to this Server and its reverse DNS entry',
    )


class Price15(BaseModel):
    location: str = Field(
        ..., description='Name of the Location the price is for', examples=['fsn1']
    )
    price_hourly: PriceHourly = Field(
        ..., description='Hourly costs for a Server type in this Location'
    )
    price_monthly: PriceMonthly = Field(
        ..., description='Monthly costs for a Server type in this Location'
    )


class ServerType6(BaseModel):
    cores: float = Field(
        ...,
        description='Number of cpu cores a Server of this type will have',
        examples=[1],
    )
    cpu_type: CpuType = Field(..., description='Type of cpu')
    deprecated: bool = Field(
        ..., description='True if Server type is deprecated', examples=[False]
    )
    description: str = Field(
        ..., description='Description of the Server type', examples=['CX11']
    )
    disk: float = Field(
        ...,
        description='Disk size a Server of this type will have in GB',
        examples=[25],
    )
    id: int = Field(..., description='ID of the Server type', examples=[1])
    memory: float = Field(
        ..., description='Memory a Server of this type will have in GB', examples=[1]
    )
    name: str = Field(
        ..., description='Unique identifier of the Server type', examples=['cx11']
    )
    prices: List[Price15] = Field(..., description='Prices in different Locations')
    storage_type: StorageType = Field(
        ...,
        description='Type of Server boot drive. Local has higher speed. Network has better availability.',
    )


class Status101(Enum):
    running = 'running'
    initializing = 'initializing'
    starting = 'starting'
    stopping = 'stopping'
    off = 'off'
    deleting = 'deleting'
    migrating = 'migrating'
    rebuilding = 'rebuilding'
    unknown = 'unknown'


class Server26(BaseModel):
    backup_window: str = Field(
        ...,
        description='Time window (UTC) in which the backup will run, or null if the backups are not enabled',
        examples=['22-02'],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    datacenter: Datacenter9 = Field(
        ..., description='Datacenter this Resource is located at'
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image: Image7
    included_traffic: float = Field(
        ...,
        description='Free Traffic for the current billing period in bytes',
        examples=[654321],
    )
    ingoing_traffic: float = Field(
        ...,
        description='Inbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    iso: Iso5 = Field(
        ...,
        description='ISO Image that is attached to this Server. Null if no ISO is attached.',
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    load_balancers: Optional[List[int]] = None
    locked: bool = Field(
        ...,
        description='True if Server has been locked and is not available to user',
        examples=[False],
    )
    name: str = Field(
        ...,
        description='Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)',
        examples=['my-resource'],
    )
    outgoing_traffic: float = Field(
        ...,
        description='Outbound Traffic for the current billing period in bytes',
        examples=[123456],
    )
    placement_group: Optional[PlacementGroup7] = Field(
        None, title='PlacementGroupNullable'
    )
    primary_disk_size: float = Field(
        ..., description='Size of the primary Disk', examples=[50]
    )
    private_net: List[PrivateNetItem4] = Field(
        ..., description='Private networks information'
    )
    protection: Protection26 = Field(
        ..., description='Protection configuration for the Server'
    )
    public_net: PublicNet8 = Field(
        ...,
        description="Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`",
    )
    rescue_enabled: bool = Field(
        ...,
        description='True if rescue mode is enabled. Server will then boot into rescue system on next reboot',
        examples=[False],
    )
    server_type: ServerType6 = Field(
        ...,
        description='Type of Server - determines how much ram, disk and cpu a Server has',
    )
    status: Status101 = Field(..., description='Status of the Server')
    volumes: Optional[List[int]] = Field(
        None, description='IDs of Volumes assigned to this Server'
    )


class ServersIdPutResponse(BaseModel):
    server: Optional[Server26] = None


class Sort30(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status102(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status103(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action54(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status103 = Field(..., description='Status of the Action')


class Meta19(BaseModel):
    pagination: Pagination


class ServersIdActionsGetResponse(BaseModel):
    actions: List[Action54]
    meta: Optional[Meta19] = None


class Status104(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class ServersIdActionsAddToPlacementGroupPostRequest(BaseModel):
    placement_group: int = Field(
        ...,
        description='ID of Placement Group the Server should be added to',
        examples=[1],
    )


class Status105(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action55(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsAddToPlacementGroupPostResponse(BaseModel):
    action: Action55 = Field(..., title='Action')


class ServersIdActionsAttachIsoPostRequest(BaseModel):
    iso: str = Field(
        ...,
        description='ID or name of ISO to attach to the Server as listed in GET `/isos`',
        examples=['FreeBSD-11.0-RELEASE-amd64-dvd1'],
    )


class Action56(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsAttachIsoPostResponse(BaseModel):
    action: Action56 = Field(..., title='Action')


class ServersIdActionsAttachToNetworkPostRequest(BaseModel):
    alias_ips: Optional[List[str]] = Field(
        None,
        description='Additional IPs to be assigned to this Server',
        examples=[['10.0.1.2']],
    )
    ip: Optional[str] = Field(
        None,
        description='IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address',
        examples=['10.0.1.1'],
    )
    network: int = Field(
        ...,
        description='ID of an existing network to attach the Server to',
        examples=[4711],
    )


class Action57(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsAttachToNetworkPostResponse(BaseModel):
    action: Action57 = Field(..., title='Action')


class ServersIdActionsChangeAliasIpsPostRequest(BaseModel):
    alias_ips: List[str] = Field(
        ..., description='New alias IPs to set for this Server', examples=[['10.0.1.2']]
    )
    network: int = Field(
        ...,
        description='ID of an existing Network already attached to the Server',
        examples=[4711],
    )


class Action58(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsChangeAliasIpsPostResponse(BaseModel):
    action: Action58 = Field(..., title='Action')


class ServersIdActionsChangeDnsPtrPostRequest(BaseModel):
    dns_ptr: str = Field(
        ...,
        description='Hostname to set as a reverse DNS PTR entry, reset to original value if `null`',
        examples=['server01.example.com'],
    )
    ip: str = Field(
        ...,
        description='Primary IP address for which the reverse DNS entry should be set',
        examples=['1.2.3.4'],
    )


class Action59(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsChangeDnsPtrPostResponse(BaseModel):
    action: Action59 = Field(..., title='Action')


class ServersIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the Server from being deleted (currently delete and rebuild attribute needs to have the same value)',
        examples=[True],
    )
    rebuild: Optional[bool] = Field(
        None,
        description='If true, prevents the Server from being rebuilt (currently delete and rebuild attribute needs to have the same value)',
        examples=[True],
    )


class Action60(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action60 = Field(..., title='Action')


class ServersIdActionsChangeTypePostRequest(BaseModel):
    server_type: str = Field(
        ...,
        description='ID or name of Server type the Server should migrate to',
        examples=['cx11'],
    )
    upgrade_disk: bool = Field(
        ...,
        description='If false, do not upgrade the disk (this allows downgrading the Server type later)',
        examples=[True],
    )


class Action61(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class ServersIdActionsChangeTypePostResponse(BaseModel):
    action: Action61 = Field(..., title='Action')


class Labels3(BaseModel):
    labelkey: Optional[str] = Field(None, description='New label', examples=['value'])


class Type78(Enum):
    snapshot = 'snapshot'
    backup = 'backup'


class ServersIdActionsCreateImagePostRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Description of the Image, will be auto-generated if not set',
        examples=['my image'],
    )
    labels: Optional[Labels3] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    type: Optional[Type78] = Field(
        None,
        description='Type of Image to create (default: `snapshot`)',
        examples=['snapshot'],
    )


class Action62(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status105 = Field(..., description='Status of the Action')


class Protection27(BaseModel):
    delete: bool = Field(
        ...,
        description='If true, prevents the Resource from being deleted',
        examples=[False],
    )


class Status113(Enum):
    available = 'available'
    creating = 'creating'
    unavailable = 'unavailable'


class Type79(Enum):
    system = 'system'
    app = 'app'
    snapshot = 'snapshot'
    backup = 'backup'
    temporary = 'temporary'


class Image8(BaseModel):
    bound_to: int = Field(
        ...,
        description='ID of Server the Image is bound to. Only set for Images of type `backup`.',
        examples=[None],
    )
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    created_from: CreatedFrom = Field(
        ..., description='Information about the Server the Image was created from'
    )
    deleted: str = Field(
        ...,
        description='Point in time where the Image was deleted (in ISO-8601 format)',
        examples=[None],
    )
    deprecated: str = Field(
        ...,
        description='Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
        examples=['2018-02-28T00:00:00+00:00'],
    )
    description: str = Field(
        ...,
        description='Description of the Image',
        examples=['Ubuntu 20.04 Standard 64 bit'],
    )
    disk_size: float = Field(
        ..., description='Size of the disk contained in the Image in GB', examples=[10]
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    image_size: float = Field(
        ...,
        description='Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
        examples=[2.3],
    )
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Unique identifier of the Image. This value is only set for system Images.',
        examples=['ubuntu-20.04'],
    )
    os_flavor: OsFlavor = Field(
        ...,
        description='Flavor of operating system contained in the Image',
        examples=['ubuntu'],
    )
    os_version: str = Field(
        ..., description='Operating system version', examples=['20.04']
    )
    protection: Protection27 = Field(
        ..., description='Protection configuration for the Resource'
    )
    rapid_deploy: Optional[bool] = Field(
        None,
        description='Indicates that rapid deploy of the Image is available',
        examples=[False],
    )
    status: Status113 = Field(
        ...,
        description="Whether the Image can be used or if it's still being created or unavailable",
    )
    type: Type79 = Field(..., description='Type of the Image', examples=['snapshot'])


class ServersIdActionsCreateImagePostResponse(BaseModel):
    action: Optional[Action62] = Field(None, title='Action')
    image: Optional[Image8] = None


class ServersIdActionsDetachFromNetworkPostRequest(BaseModel):
    network: int = Field(
        ...,
        description='ID of an existing network to detach the Server from',
        examples=[4711],
    )


class Status114(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action63(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsDetachFromNetworkPostResponse(BaseModel):
    action: Action63 = Field(..., title='Action')


class Action64(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsDetachIsoPostResponse(BaseModel):
    action: Action64 = Field(..., title='Action')


class Action65(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsDisableBackupPostResponse(BaseModel):
    action: Action65 = Field(..., title='Action')


class Action66(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsDisableRescuePostResponse(BaseModel):
    action: Action66 = Field(..., title='Action')


class Action67(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsEnableBackupPostResponse(BaseModel):
    action: Action67 = Field(..., title='Action')


class Type80(Enum):
    linux64 = 'linux64'
    linux32 = 'linux32'


class ServersIdActionsEnableRescuePostRequest(BaseModel):
    ssh_keys: Optional[List[int]] = Field(
        None,
        description='Array of SSH key IDs which should be injected into the rescue system.',
        examples=[[2323]],
    )
    type: Optional[Type80] = Field(
        None, description='Type of rescue system to boot (default: `linux64`)'
    )


class Action68(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsEnableRescuePostResponse(BaseModel):
    action: Optional[Action68] = Field(None, title='Action')
    root_password: Optional[str] = Field(
        None,
        description='Password that will be set for this Server once the Action succeeds',
        examples=['zCWbFhnu950dUTko5f40'],
    )


class Action69(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsPoweroffPostResponse(BaseModel):
    action: Action69 = Field(..., title='Action')


class Action70(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsPoweronPostResponse(BaseModel):
    action: Action70 = Field(..., title='Action')


class Action71(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsRebootPostResponse(BaseModel):
    action: Action71 = Field(..., title='Action')


class ServersIdActionsRebuildPostRequest(BaseModel):
    image: str = Field(
        ...,
        description='ID or name of Image to rebuilt from.',
        examples=['ubuntu-20.04'],
    )


class Action72(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsRebuildPostResponse(BaseModel):
    action: Optional[Action72] = Field(None, title='Action')
    root_password: Optional[str] = Field(
        None, description='New root password when not using SSH keys'
    )


class Action73(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsRemoveFromPlacementGroupPostResponse(BaseModel):
    action: Action73 = Field(..., title='Action')


class Action74(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsRequestConsolePostResponse(BaseModel):
    action: Action74 = Field(..., title='Action')
    password: str = Field(
        ...,
        description='VNC password to use for this connection (this password only works in combination with a wss_url with valid token)',
        examples=['9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x'],
    )
    wss_url: str = Field(
        ...,
        description='URL of websocket proxy to use; this includes a token which is valid for a limited time only',
        examples=[
            'wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c'
        ],
    )


class Action75(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsResetPostResponse(BaseModel):
    action: Action75 = Field(..., title='Action')


class Action76(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsResetPasswordPostResponse(BaseModel):
    action: Optional[Action76] = Field(None, title='Action')
    root_password: Optional[str] = Field(
        None,
        description='Password that will be set for this Server once the Action succeeds',
        examples=['zCWbFhnu950dUTko5f40'],
    )


class Action77(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsShutdownPostResponse(BaseModel):
    action: Action77 = Field(..., title='Action')


class Action78(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status114 = Field(..., description='Status of the Action')


class ServersIdActionsActionIdGetResponse(BaseModel):
    action: Action78 = Field(..., title='Action')


class Type81(Enum):
    cpu = 'cpu'
    disk = 'disk'
    network = 'network'


class Metrics1(BaseModel):
    end: str = Field(
        ...,
        description='End of period of metrics reported (in ISO-8601 format)',
        examples=['2017-01-01T23:00:00+00:00'],
    )
    start: str = Field(
        ...,
        description='Start of period of metrics reported (in ISO-8601 format)',
        examples=['2017-01-01T00:00:00+00:00'],
    )
    step: float = Field(
        ..., description='Resolution of results in seconds.', examples=[60]
    )
    time_series: Dict[str, TimeSeries] = Field(
        ...,
        description='Hash with timeseries information, containing the name of timeseries as key',
        examples=[
            {
                'name_of_timeseries': {
                    'values': [[1435781470.622, '42'], [1435781471.622, '43']]
                }
            }
        ],
    )


class ServersIdMetricsGetResponse(BaseModel):
    metrics: Metrics1


class Sort32(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'


class Meta20(BaseModel):
    pagination: Pagination


class SshKey(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    fingerprint: str = Field(
        ...,
        description='Fingerprint of public key',
        examples=['b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    public_key: str = Field(
        ..., description='Public key', examples=['ssh-rsa AAAjjk76kgf...Xt']
    )


class SshKeysGetResponse(BaseModel):
    meta: Optional[Meta20] = None
    ssh_keys: List[SshKey]


class SshKeysPostRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(..., description='Name of the SSH key', examples=['My ssh key'])
    public_key: str = Field(
        ..., description='Public key', examples=['ssh-rsa AAAjjk76kgf...Xt']
    )


class SshKeysPostResponse(BaseModel):
    ssh_key: SshKey


class SshKeysIdGetResponse(BaseModel):
    ssh_key: SshKey


class SshKeysIdPutRequest(BaseModel):
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    name: Optional[str] = Field(
        None, description='New name Name to set', examples=['My ssh key']
    )


class SshKeysIdPutResponse(BaseModel):
    ssh_key: SshKey


class Status130(Enum):
    available = 'available'
    creating = 'creating'


class Sort34(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    name = 'name'
    name_asc = 'name:asc'
    name_desc = 'name:desc'
    created = 'created'
    created_asc = 'created:asc'
    created_desc = 'created:desc'


class Meta21(BaseModel):
    pagination: Pagination


class Status131(Enum):
    creating = 'creating'
    available = 'available'


class Volume1(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    format: str = Field(
        ...,
        description='Filesystem of the Volume if formatted on creation, null if not formatted on creation',
        examples=['xfs'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    linux_device: str = Field(
        ...,
        description='Device path on the file system for the Volume',
        examples=['/dev/disk/by-id/scsi-0HC_Volume_4711'],
    )
    location: Location = Field(
        ...,
        description='Location of the Volume. Volume can only be attached to Servers in the same Location.',
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection27 = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Volume is attached to, null if it is not attached at all',
        examples=[12],
    )
    size: float = Field(..., description='Size in GB of the Volume', examples=[42])
    status: Status131 = Field(
        ..., description='Current status of the Volume', examples=['available']
    )


class VolumesGetResponse(BaseModel):
    meta: Optional[Meta21] = None
    volumes: List[Volume1]


class Status132(Enum):
    available = 'available'
    creating = 'creating'


class VolumesPostRequest(BaseModel):
    automount: Optional[bool] = Field(
        None,
        description='Auto-mount Volume after attach. `server` must be provided.',
        examples=[False],
    )
    format: Optional[str] = Field(
        None,
        description='Format Volume after creation. One of: `xfs`, `ext4`',
        examples=['xfs'],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description='User-defined labels (key-value pairs)',
        examples=[{'labelkey': 'value'}],
    )
    location: Optional[str] = Field(
        None,
        description='Location to create the Volume in (can be omitted if Server is specified)',
        examples=['nbg1'],
    )
    name: str = Field(
        ..., description='Name of the volume', examples=['databases-storage']
    )
    server: Optional[int] = Field(
        None,
        description="Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)",
    )
    size: int = Field(..., description='Size of the Volume in GB', examples=[42])


class Status133(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action79(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status133 = Field(..., description='Status of the Action')


class NextAction1(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status133 = Field(..., description='Status of the Action')


class Status135(Enum):
    creating = 'creating'
    available = 'available'


class Volume2(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    format: str = Field(
        ...,
        description='Filesystem of the Volume if formatted on creation, null if not formatted on creation',
        examples=['xfs'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    linux_device: str = Field(
        ...,
        description='Device path on the file system for the Volume',
        examples=['/dev/disk/by-id/scsi-0HC_Volume_4711'],
    )
    location: Location = Field(
        ...,
        description='Location of the Volume. Volume can only be attached to Servers in the same Location.',
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection27 = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Volume is attached to, null if it is not attached at all',
        examples=[12],
    )
    size: float = Field(..., description='Size in GB of the Volume', examples=[42])
    status: Status135 = Field(
        ..., description='Current status of the Volume', examples=['available']
    )


class VolumesPostResponse(BaseModel):
    action: Action79 = Field(..., title='Action')
    next_actions: List[NextAction1]
    volume: Volume2


class Volume3(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    format: str = Field(
        ...,
        description='Filesystem of the Volume if formatted on creation, null if not formatted on creation',
        examples=['xfs'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    linux_device: str = Field(
        ...,
        description='Device path on the file system for the Volume',
        examples=['/dev/disk/by-id/scsi-0HC_Volume_4711'],
    )
    location: Location = Field(
        ...,
        description='Location of the Volume. Volume can only be attached to Servers in the same Location.',
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection27 = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Volume is attached to, null if it is not attached at all',
        examples=[12],
    )
    size: float = Field(..., description='Size in GB of the Volume', examples=[42])
    status: Status135 = Field(
        ..., description='Current status of the Volume', examples=['available']
    )


class VolumesIdGetResponse(BaseModel):
    volume: Volume3


class Labels4(BaseModel):
    labelkey: Optional[str] = Field(None, examples=['value'])


class VolumesIdPutRequest(BaseModel):
    labels: Optional[Labels4] = Field(
        None, description='User-defined labels (key-value pairs)'
    )
    name: str = Field(..., description='New Volume name', examples=['database-storage'])


class Volume4(BaseModel):
    created: str = Field(
        ...,
        description='Point in time when the Resource was created (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    format: str = Field(
        ...,
        description='Filesystem of the Volume if formatted on creation, null if not formatted on creation',
        examples=['xfs'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    labels: Dict[str, str] = Field(
        ..., description='User-defined labels (key-value pairs)'
    )
    linux_device: str = Field(
        ...,
        description='Device path on the file system for the Volume',
        examples=['/dev/disk/by-id/scsi-0HC_Volume_4711'],
    )
    location: Location = Field(
        ...,
        description='Location of the Volume. Volume can only be attached to Servers in the same Location.',
    )
    name: str = Field(
        ...,
        description='Name of the Resource. Must be unique per Project.',
        examples=['my-resource'],
    )
    protection: Protection27 = Field(
        ..., description='Protection configuration for the Resource'
    )
    server: int = Field(
        ...,
        description='ID of the Server the Volume is attached to, null if it is not attached at all',
        examples=[12],
    )
    size: float = Field(..., description='Size in GB of the Volume', examples=[42])
    status: Status135 = Field(
        ..., description='Current status of the Volume', examples=['available']
    )


class VolumesIdPutResponse(BaseModel):
    volume: Volume4


class Sort36(Enum):
    id = 'id'
    id_asc = 'id:asc'
    id_desc = 'id:desc'
    command = 'command'
    command_asc = 'command:asc'
    command_desc = 'command:desc'
    status = 'status'
    status_asc = 'status:asc'
    status_desc = 'status:desc'
    progress = 'progress'
    progress_asc = 'progress:asc'
    progress_desc = 'progress:desc'
    started = 'started'
    started_asc = 'started:asc'
    started_desc = 'started:desc'
    finished = 'finished'
    finished_asc = 'finished:asc'
    finished_desc = 'finished:desc'


class Status138(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class Status139(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action80(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status139 = Field(..., description='Status of the Action')


class Meta22(BaseModel):
    pagination: Pagination


class VolumesIdActionsGetResponse(BaseModel):
    actions: List[Action80]
    meta: Optional[Meta22] = None


class Status140(Enum):
    running = 'running'
    success = 'success'
    error = 'error'


class VolumesIdActionsAttachPostRequest(BaseModel):
    automount: Optional[bool] = Field(
        None, description='Auto-mount the Volume after attaching it', examples=[False]
    )
    server: int = Field(
        ...,
        description='ID of the Server the Volume will be attached to',
        examples=[43],
    )


class Status141(Enum):
    success = 'success'
    running = 'running'
    error = 'error'


class Action81(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status141 = Field(..., description='Status of the Action')


class VolumesIdActionsAttachPostResponse(BaseModel):
    action: Action81 = Field(..., title='Action')


class VolumesIdActionsChangeProtectionPostRequest(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='If true, prevents the Volume from being deleted',
        examples=[True],
    )


class Action82(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status141 = Field(..., description='Status of the Action')


class VolumesIdActionsChangeProtectionPostResponse(BaseModel):
    action: Action82 = Field(..., title='Action')


class Action83(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status141 = Field(..., description='Status of the Action')


class VolumesIdActionsDetachPostResponse(BaseModel):
    action: Action83 = Field(..., title='Action')


class VolumesIdActionsResizePostRequest(BaseModel):
    size: float = Field(
        ...,
        description='New Volume size in GB (must be greater than current size)',
        examples=[50],
    )


class Action84(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status141 = Field(..., description='Status of the Action')


class VolumesIdActionsResizePostResponse(BaseModel):
    action: Action84 = Field(..., title='Action')


class Action85(BaseModel):
    command: str = Field(
        ..., description='Command executed in the Action', examples=['start_server']
    )
    error: Error7 = Field(
        ...,
        description='Error message for the Action if error occurred, otherwise null',
    )
    finished: str = Field(
        ...,
        description='Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    id: int = Field(..., description='ID of the Resource', examples=[42])
    progress: float = Field(
        ..., description='Progress of Action in percent', examples=[100]
    )
    resources: List[Resource] = Field(
        ..., description='Resources the Action relates to'
    )
    started: str = Field(
        ...,
        description='Point in time when the Action was started (in ISO-8601 format)',
        examples=['2016-01-30T23:55:00+00:00'],
    )
    status: Status141 = Field(..., description='Status of the Action')


class VolumesIdActionsActionIdGetResponse(BaseModel):
    action: Action85 = Field(..., title='Action')
